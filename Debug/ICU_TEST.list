
ICU_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f84  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08004124  08004124  00014124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004178  08004178  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  08004178  08004178  00014178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004180  08004180  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004180  08004180  00014180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004184  08004184  00014184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08004188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  200000b0  08004238  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08004238  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e7a  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001854  00000000  00000000  00029f5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e8  00000000  00000000  0002b7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000920  00000000  00000000  0002c198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000162c8  00000000  00000000  0002cab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aeb0  00000000  00000000  00042d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b11e  00000000  00000000  0004dc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d8d4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cd0  00000000  00000000  000d8da0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b0 	.word	0x200000b0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800410c 	.word	0x0800410c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b4 	.word	0x200000b4
 80001dc:	0800410c 	.word	0x0800410c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000594:	b5b0      	push	{r4, r5, r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
 80005a0:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 80005a2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80005a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 80005aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80005ae:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 80005b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005b2:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80005b4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80005b6:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 80005c4:	f107 0310 	add.w	r3, r7, #16
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 f80e 	bl	80005ea <Lcd_init>

	return lcd;
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	461d      	mov	r5, r3
 80005d2:	f107 0410 	add.w	r4, r7, #16
 80005d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80005de:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80005e2:	68f8      	ldr	r0, [r7, #12]
 80005e4:	3728      	adds	r7, #40	; 0x28
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bdb0      	pop	{r4, r5, r7, pc}

080005ea <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b082      	sub	sp, #8
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	7d9b      	ldrb	r3, [r3, #22]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d10c      	bne.n	8000614 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80005fa:	2133      	movs	r1, #51	; 0x33
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f000 f89a 	bl	8000736 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000602:	2132      	movs	r1, #50	; 0x32
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f000 f896 	bl	8000736 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 800060a:	2128      	movs	r1, #40	; 0x28
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f000 f892 	bl	8000736 <lcd_write_command>
 8000612:	e003      	b.n	800061c <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000614:	2138      	movs	r1, #56	; 0x38
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f000 f88d 	bl	8000736 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 800061c:	2101      	movs	r1, #1
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f000 f889 	bl	8000736 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000624:	210c      	movs	r1, #12
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f000 f885 	bl	8000736 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 800062c:	2106      	movs	r1, #6
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f000 f881 	bl	8000736 <lcd_write_command>
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000646:	f107 030c 	add.w	r3, r7, #12
 800064a:	683a      	ldr	r2, [r7, #0]
 800064c:	4906      	ldr	r1, [pc, #24]	; (8000668 <Lcd_int+0x2c>)
 800064e:	4618      	mov	r0, r3
 8000650:	f003 f8ee 	bl	8003830 <siprintf>

	Lcd_string(lcd, buffer);
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	4619      	mov	r1, r3
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f000 f806 	bl	800066c <Lcd_string>
}
 8000660:	bf00      	nop
 8000662:	3718      	adds	r7, #24
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	08004124 	.word	0x08004124

0800066c <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000676:	2300      	movs	r3, #0
 8000678:	73fb      	strb	r3, [r7, #15]
 800067a:	e00a      	b.n	8000692 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	683a      	ldr	r2, [r7, #0]
 8000680:	4413      	add	r3, r2
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	4619      	mov	r1, r3
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f000 f883 	bl	8000792 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	3301      	adds	r3, #1
 8000690:	73fb      	strb	r3, [r7, #15]
 8000692:	7bfc      	ldrb	r4, [r7, #15]
 8000694:	6838      	ldr	r0, [r7, #0]
 8000696:	f7ff fda3 	bl	80001e0 <strlen>
 800069a:	4603      	mov	r3, r0
 800069c:	429c      	cmp	r4, r3
 800069e:	d3ed      	bcc.n	800067c <Lcd_string+0x10>
	}
}
 80006a0:	bf00      	nop
 80006a2:	bf00      	nop
 80006a4:	3714      	adds	r7, #20
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd90      	pop	{r4, r7, pc}
	...

080006ac <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	460b      	mov	r3, r1
 80006b6:	70fb      	strb	r3, [r7, #3]
 80006b8:	4613      	mov	r3, r2
 80006ba:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80006bc:	78fb      	ldrb	r3, [r7, #3]
 80006be:	4a07      	ldr	r2, [pc, #28]	; (80006dc <Lcd_cursor+0x30>)
 80006c0:	5cd2      	ldrb	r2, [r2, r3]
 80006c2:	78bb      	ldrb	r3, [r7, #2]
 80006c4:	4413      	add	r3, r2
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	3b80      	subs	r3, #128	; 0x80
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	4619      	mov	r1, r3
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f000 f831 	bl	8000736 <lcd_write_command>
	#endif
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	08004130 	.word	0x08004130

080006e0 <Lcd_define_char>:
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
	lcd_write_command(lcd, CLEAR_DISPLAY);
}

void Lcd_define_char(Lcd_HandleTypeDef * lcd, uint8_t code, uint8_t bitmap[]){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	460b      	mov	r3, r1
 80006ea:	607a      	str	r2, [r7, #4]
 80006ec:	72fb      	strb	r3, [r7, #11]
	lcd_write_command(lcd, SETCGRAM_ADDR | (code << 3));
 80006ee:	7afb      	ldrb	r3, [r7, #11]
 80006f0:	00db      	lsls	r3, r3, #3
 80006f2:	b25b      	sxtb	r3, r3
 80006f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006f8:	b25b      	sxtb	r3, r3
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	4619      	mov	r1, r3
 80006fe:	68f8      	ldr	r0, [r7, #12]
 8000700:	f000 f819 	bl	8000736 <lcd_write_command>
	for(uint8_t i=0;i<8;++i){
 8000704:	2300      	movs	r3, #0
 8000706:	75fb      	strb	r3, [r7, #23]
 8000708:	e00a      	b.n	8000720 <Lcd_define_char+0x40>
		lcd_write_data(lcd, bitmap[i]);
 800070a:	7dfb      	ldrb	r3, [r7, #23]
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	4413      	add	r3, r2
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	4619      	mov	r1, r3
 8000714:	68f8      	ldr	r0, [r7, #12]
 8000716:	f000 f83c 	bl	8000792 <lcd_write_data>
	for(uint8_t i=0;i<8;++i){
 800071a:	7dfb      	ldrb	r3, [r7, #23]
 800071c:	3301      	adds	r3, #1
 800071e:	75fb      	strb	r3, [r7, #23]
 8000720:	7dfb      	ldrb	r3, [r7, #23]
 8000722:	2b07      	cmp	r3, #7
 8000724:	d9f1      	bls.n	800070a <Lcd_define_char+0x2a>
	}
	lcd_write_command(lcd,RETURN_HOME);
 8000726:	2102      	movs	r1, #2
 8000728:	68f8      	ldr	r0, [r7, #12]
 800072a:	f000 f804 	bl	8000736 <lcd_write_command>

}
 800072e:	bf00      	nop
 8000730:	3718      	adds	r7, #24
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}

08000736 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000736:	b580      	push	{r7, lr}
 8000738:	b082      	sub	sp, #8
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
 800073e:	460b      	mov	r3, r1
 8000740:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	6898      	ldr	r0, [r3, #8]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	899b      	ldrh	r3, [r3, #12]
 800074a:	2200      	movs	r2, #0
 800074c:	4619      	mov	r1, r3
 800074e:	f001 f89b 	bl	8001888 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	7d9b      	ldrb	r3, [r3, #22]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d111      	bne.n	800077e <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 800075a:	78fb      	ldrb	r3, [r7, #3]
 800075c:	091b      	lsrs	r3, r3, #4
 800075e:	b2db      	uxtb	r3, r3
 8000760:	2204      	movs	r2, #4
 8000762:	4619      	mov	r1, r3
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f000 f842 	bl	80007ee <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 800076a:	78fb      	ldrb	r3, [r7, #3]
 800076c:	f003 030f 	and.w	r3, r3, #15
 8000770:	b2db      	uxtb	r3, r3
 8000772:	2204      	movs	r2, #4
 8000774:	4619      	mov	r1, r3
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f000 f839 	bl	80007ee <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 800077c:	e005      	b.n	800078a <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 800077e:	78fb      	ldrb	r3, [r7, #3]
 8000780:	2208      	movs	r2, #8
 8000782:	4619      	mov	r1, r3
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f000 f832 	bl	80007ee <lcd_write>
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b082      	sub	sp, #8
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
 800079a:	460b      	mov	r3, r1
 800079c:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	6898      	ldr	r0, [r3, #8]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	899b      	ldrh	r3, [r3, #12]
 80007a6:	2201      	movs	r2, #1
 80007a8:	4619      	mov	r1, r3
 80007aa:	f001 f86d 	bl	8001888 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	7d9b      	ldrb	r3, [r3, #22]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d111      	bne.n	80007da <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 80007b6:	78fb      	ldrb	r3, [r7, #3]
 80007b8:	091b      	lsrs	r3, r3, #4
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	2204      	movs	r2, #4
 80007be:	4619      	mov	r1, r3
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f000 f814 	bl	80007ee <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 80007c6:	78fb      	ldrb	r3, [r7, #3]
 80007c8:	f003 030f 	and.w	r3, r3, #15
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	2204      	movs	r2, #4
 80007d0:	4619      	mov	r1, r3
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f000 f80b 	bl	80007ee <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 80007d8:	e005      	b.n	80007e6 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 80007da:	78fb      	ldrb	r3, [r7, #3]
 80007dc:	2208      	movs	r2, #8
 80007de:	4619      	mov	r1, r3
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f000 f804 	bl	80007ee <lcd_write>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b084      	sub	sp, #16
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
 80007f6:	460b      	mov	r3, r1
 80007f8:	70fb      	strb	r3, [r7, #3]
 80007fa:	4613      	mov	r3, r2
 80007fc:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 80007fe:	2300      	movs	r3, #0
 8000800:	73fb      	strb	r3, [r7, #15]
 8000802:	e019      	b.n	8000838 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	7bfb      	ldrb	r3, [r7, #15]
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	4413      	add	r3, r2
 800080e:	6818      	ldr	r0, [r3, #0]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	685a      	ldr	r2, [r3, #4]
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	4413      	add	r3, r2
 800081a:	8819      	ldrh	r1, [r3, #0]
 800081c:	78fa      	ldrb	r2, [r7, #3]
 800081e:	7bfb      	ldrb	r3, [r7, #15]
 8000820:	fa42 f303 	asr.w	r3, r2, r3
 8000824:	b2db      	uxtb	r3, r3
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	b2db      	uxtb	r3, r3
 800082c:	461a      	mov	r2, r3
 800082e:	f001 f82b 	bl	8001888 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	3301      	adds	r3, #1
 8000836:	73fb      	strb	r3, [r7, #15]
 8000838:	7bfa      	ldrb	r2, [r7, #15]
 800083a:	78bb      	ldrb	r3, [r7, #2]
 800083c:	429a      	cmp	r2, r3
 800083e:	d3e1      	bcc.n	8000804 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	6918      	ldr	r0, [r3, #16]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	8a9b      	ldrh	r3, [r3, #20]
 8000848:	2201      	movs	r2, #1
 800084a:	4619      	mov	r1, r3
 800084c:	f001 f81c 	bl	8001888 <HAL_GPIO_WritePin>
	DELAY(1);
 8000850:	2001      	movs	r0, #1
 8000852:	f000 fd5f 	bl	8001314 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6918      	ldr	r0, [r3, #16]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	8a9b      	ldrh	r3, [r3, #20]
 800085e:	2200      	movs	r2, #0
 8000860:	4619      	mov	r1, r3
 8000862:	f001 f811 	bl	8001888 <HAL_GPIO_WritePin>
}
 8000866:	bf00      	nop
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	7f1b      	ldrb	r3, [r3, #28]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d147      	bne.n	8000910 <HAL_TIM_IC_CaptureCallback+0xa0>
	{
		if (Is_First_Captured==0) // if the first rising edge is not captured
 8000880:	4b54      	ldr	r3, [pc, #336]	; (80009d4 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d10a      	bne.n	800089e <HAL_TIM_IC_CaptureCallback+0x2e>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000888:	2100      	movs	r1, #0
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f002 fa74 	bl	8002d78 <HAL_TIM_ReadCapturedValue>
 8000890:	4603      	mov	r3, r0
 8000892:	4a51      	ldr	r2, [pc, #324]	; (80009d8 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000894:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000896:	4b4f      	ldr	r3, [pc, #316]	; (80009d4 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000898:	2201      	movs	r2, #1
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	e038      	b.n	8000910 <HAL_TIM_IC_CaptureCallback+0xa0>
		}

		else   // If the first rising edge is captured, now we will capture the second edge
		{
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 800089e:	2100      	movs	r1, #0
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f002 fa69 	bl	8002d78 <HAL_TIM_ReadCapturedValue>
 80008a6:	4603      	mov	r3, r0
 80008a8:	4a4c      	ldr	r2, [pc, #304]	; (80009dc <HAL_TIM_IC_CaptureCallback+0x16c>)
 80008aa:	6013      	str	r3, [r2, #0]

			if (IC_Val2 > IC_Val1)
 80008ac:	4b4b      	ldr	r3, [pc, #300]	; (80009dc <HAL_TIM_IC_CaptureCallback+0x16c>)
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	4b49      	ldr	r3, [pc, #292]	; (80009d8 <HAL_TIM_IC_CaptureCallback+0x168>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d907      	bls.n	80008c8 <HAL_TIM_IC_CaptureCallback+0x58>
			{
				Difference = IC_Val2-IC_Val1;
 80008b8:	4b48      	ldr	r3, [pc, #288]	; (80009dc <HAL_TIM_IC_CaptureCallback+0x16c>)
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	4b46      	ldr	r3, [pc, #280]	; (80009d8 <HAL_TIM_IC_CaptureCallback+0x168>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	4a47      	ldr	r2, [pc, #284]	; (80009e0 <HAL_TIM_IC_CaptureCallback+0x170>)
 80008c4:	6013      	str	r3, [r2, #0]
 80008c6:	e00d      	b.n	80008e4 <HAL_TIM_IC_CaptureCallback+0x74>
			}

			else if (IC_Val1 > IC_Val2)
 80008c8:	4b43      	ldr	r3, [pc, #268]	; (80009d8 <HAL_TIM_IC_CaptureCallback+0x168>)
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	4b43      	ldr	r3, [pc, #268]	; (80009dc <HAL_TIM_IC_CaptureCallback+0x16c>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d907      	bls.n	80008e4 <HAL_TIM_IC_CaptureCallback+0x74>
			{
				Difference = (0xffffffff - IC_Val1) + IC_Val2;
 80008d4:	4b41      	ldr	r3, [pc, #260]	; (80009dc <HAL_TIM_IC_CaptureCallback+0x16c>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	4b3f      	ldr	r3, [pc, #252]	; (80009d8 <HAL_TIM_IC_CaptureCallback+0x168>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	3b01      	subs	r3, #1
 80008e0:	4a3f      	ldr	r2, [pc, #252]	; (80009e0 <HAL_TIM_IC_CaptureCallback+0x170>)
 80008e2:	6013      	str	r3, [r2, #0]
			}

			float refClock = TIMCLOCK/(PRESCALAR);
 80008e4:	4b3f      	ldr	r3, [pc, #252]	; (80009e4 <HAL_TIM_IC_CaptureCallback+0x174>)
 80008e6:	617b      	str	r3, [r7, #20]

			frequency = refClock/Difference;
 80008e8:	4b3d      	ldr	r3, [pc, #244]	; (80009e0 <HAL_TIM_IC_CaptureCallback+0x170>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	ee07 3a90 	vmov	s15, r3
 80008f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80008f4:	edd7 6a05 	vldr	s13, [r7, #20]
 80008f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008fc:	4b3a      	ldr	r3, [pc, #232]	; (80009e8 <HAL_TIM_IC_CaptureCallback+0x178>)
 80008fe:	edc3 7a00 	vstr	s15, [r3]

			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2200      	movs	r2, #0
 8000908:	625a      	str	r2, [r3, #36]	; 0x24
			Is_First_Captured = 0; // set it back to false
 800090a:	4b32      	ldr	r3, [pc, #200]	; (80009d4 <HAL_TIM_IC_CaptureCallback+0x164>)
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
		}
	}
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel1
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	7f1b      	ldrb	r3, [r3, #28]
 8000914:	2b02      	cmp	r3, #2
 8000916:	d158      	bne.n	80009ca <HAL_TIM_IC_CaptureCallback+0x15a>
	{
		if (Is_First_CapturedPW==0) // if the first value is not captured
 8000918:	4b34      	ldr	r3, [pc, #208]	; (80009ec <HAL_TIM_IC_CaptureCallback+0x17c>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d10a      	bne.n	8000936 <HAL_TIM_IC_CaptureCallback+0xc6>
		{
			IC_Val1PW = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 8000920:	2104      	movs	r1, #4
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f002 fa28 	bl	8002d78 <HAL_TIM_ReadCapturedValue>
 8000928:	4603      	mov	r3, r0
 800092a:	4a31      	ldr	r2, [pc, #196]	; (80009f0 <HAL_TIM_IC_CaptureCallback+0x180>)
 800092c:	6013      	str	r3, [r2, #0]
			Is_First_CapturedPW = 1;  // set the first captured as true
 800092e:	4b2f      	ldr	r3, [pc, #188]	; (80009ec <HAL_TIM_IC_CaptureCallback+0x17c>)
 8000930:	2201      	movs	r2, #1
 8000932:	601a      	str	r2, [r3, #0]
			usWidth=(100-(usWidth+1));
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
			Is_First_CapturedPW = 0; // set it back to false
		}
	}
}
 8000934:	e049      	b.n	80009ca <HAL_TIM_IC_CaptureCallback+0x15a>
			IC_Val2PW = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // read second value
 8000936:	2104      	movs	r1, #4
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f002 fa1d 	bl	8002d78 <HAL_TIM_ReadCapturedValue>
 800093e:	4603      	mov	r3, r0
 8000940:	4a2c      	ldr	r2, [pc, #176]	; (80009f4 <HAL_TIM_IC_CaptureCallback+0x184>)
 8000942:	6013      	str	r3, [r2, #0]
			if (IC_Val2PW > IC_Val1PW)
 8000944:	4b2b      	ldr	r3, [pc, #172]	; (80009f4 <HAL_TIM_IC_CaptureCallback+0x184>)
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	4b29      	ldr	r3, [pc, #164]	; (80009f0 <HAL_TIM_IC_CaptureCallback+0x180>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	429a      	cmp	r2, r3
 800094e:	d907      	bls.n	8000960 <HAL_TIM_IC_CaptureCallback+0xf0>
				DifferencePW = IC_Val2PW-IC_Val1PW;
 8000950:	4b28      	ldr	r3, [pc, #160]	; (80009f4 <HAL_TIM_IC_CaptureCallback+0x184>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <HAL_TIM_IC_CaptureCallback+0x180>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	4a27      	ldr	r2, [pc, #156]	; (80009f8 <HAL_TIM_IC_CaptureCallback+0x188>)
 800095c:	6013      	str	r3, [r2, #0]
 800095e:	e00d      	b.n	800097c <HAL_TIM_IC_CaptureCallback+0x10c>
			else if (IC_Val1PW > IC_Val2PW)
 8000960:	4b23      	ldr	r3, [pc, #140]	; (80009f0 <HAL_TIM_IC_CaptureCallback+0x180>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	4b23      	ldr	r3, [pc, #140]	; (80009f4 <HAL_TIM_IC_CaptureCallback+0x184>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	429a      	cmp	r2, r3
 800096a:	d907      	bls.n	800097c <HAL_TIM_IC_CaptureCallback+0x10c>
				DifferencePW = (0xffffffff - IC_Val1PW) + IC_Val2PW;
 800096c:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <HAL_TIM_IC_CaptureCallback+0x184>)
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <HAL_TIM_IC_CaptureCallback+0x180>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	3b01      	subs	r3, #1
 8000978:	4a1f      	ldr	r2, [pc, #124]	; (80009f8 <HAL_TIM_IC_CaptureCallback+0x188>)
 800097a:	6013      	str	r3, [r2, #0]
			float refClock = TIMCLOCK/(PRESCALAR);
 800097c:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <HAL_TIM_IC_CaptureCallback+0x174>)
 800097e:	613b      	str	r3, [r7, #16]
			float mFactor = 1000000/refClock;
 8000980:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80009fc <HAL_TIM_IC_CaptureCallback+0x18c>
 8000984:	ed97 7a04 	vldr	s14, [r7, #16]
 8000988:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800098c:	edc7 7a03 	vstr	s15, [r7, #12]
			usWidth = DifferencePW*mFactor;
 8000990:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <HAL_TIM_IC_CaptureCallback+0x188>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	ee07 3a90 	vmov	s15, r3
 8000998:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800099c:	edd7 7a03 	vldr	s15, [r7, #12]
 80009a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009a8:	ee17 2a90 	vmov	r2, s15
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <HAL_TIM_IC_CaptureCallback+0x190>)
 80009ae:	601a      	str	r2, [r3, #0]
			usWidth=(100-(usWidth+1));
 80009b0:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <HAL_TIM_IC_CaptureCallback+0x190>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f1c3 0363 	rsb	r3, r3, #99	; 0x63
 80009b8:	4a11      	ldr	r2, [pc, #68]	; (8000a00 <HAL_TIM_IC_CaptureCallback+0x190>)
 80009ba:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2200      	movs	r2, #0
 80009c2:	625a      	str	r2, [r3, #36]	; 0x24
			Is_First_CapturedPW = 0; // set it back to false
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <HAL_TIM_IC_CaptureCallback+0x17c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
}
 80009ca:	bf00      	nop
 80009cc:	3718      	adds	r7, #24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000180 	.word	0x20000180
 80009d8:	20000174 	.word	0x20000174
 80009dc:	20000178 	.word	0x20000178
 80009e0:	2000017c 	.word	0x2000017c
 80009e4:	49742400 	.word	0x49742400
 80009e8:	20000184 	.word	0x20000184
 80009ec:	20000194 	.word	0x20000194
 80009f0:	20000188 	.word	0x20000188
 80009f4:	2000018c 	.word	0x2000018c
 80009f8:	20000190 	.word	0x20000190
 80009fc:	49742400 	.word	0x49742400
 8000a00:	20000198 	.word	0x20000198

08000a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a04:	b5b0      	push	{r4, r5, r7, lr}
 8000a06:	b08c      	sub	sp, #48	; 0x30
 8000a08:	af04      	add	r7, sp, #16
	  /* USER CODE END 1 */

	  /* MCU Configuration--------------------------------------------------------*/

	  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	  HAL_Init();
 8000a0a:	f000 fc11 	bl	8001230 <HAL_Init>
	  /* USER CODE BEGIN Init */

	  /* USER CODE END Init */

	  /* Configure the system clock */
	  SystemClock_Config();
 8000a0e:	f000 f8d1 	bl	8000bb4 <SystemClock_Config>
	  /* USER CODE BEGIN SysInit */

	  /* USER CODE END SysInit */

	  /* Initialize all configured peripherals */
	  MX_GPIO_Init();
 8000a12:	f000 fa4b 	bl	8000eac <MX_GPIO_Init>
	  MX_TIM1_Init();
 8000a16:	f000 f92d 	bl	8000c74 <MX_TIM1_Init>
	  MX_TIM2_Init();
 8000a1a:	f000 f9cb 	bl	8000db4 <MX_TIM2_Init>
	  /* USER CODE BEGIN 2 */
	  lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_5, GPIOB, GPIO_PIN_4, LCD_4_BIT_MODE);
 8000a1e:	4c56      	ldr	r4, [pc, #344]	; (8000b78 <main+0x174>)
 8000a20:	4638      	mov	r0, r7
 8000a22:	2300      	movs	r3, #0
 8000a24:	9303      	str	r3, [sp, #12]
 8000a26:	2310      	movs	r3, #16
 8000a28:	9302      	str	r3, [sp, #8]
 8000a2a:	4b54      	ldr	r3, [pc, #336]	; (8000b7c <main+0x178>)
 8000a2c:	9301      	str	r3, [sp, #4]
 8000a2e:	2320      	movs	r3, #32
 8000a30:	9300      	str	r3, [sp, #0]
 8000a32:	4b52      	ldr	r3, [pc, #328]	; (8000b7c <main+0x178>)
 8000a34:	4a52      	ldr	r2, [pc, #328]	; (8000b80 <main+0x17c>)
 8000a36:	4953      	ldr	r1, [pc, #332]	; (8000b84 <main+0x180>)
 8000a38:	f7ff fdac 	bl	8000594 <Lcd_create>
 8000a3c:	4625      	mov	r5, r4
 8000a3e:	463c      	mov	r4, r7
 8000a40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a44:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000a48:	e885 0003 	stmia.w	r5, {r0, r1}
	  Lcd_define_char(&lcd,0,one);
 8000a4c:	4a4e      	ldr	r2, [pc, #312]	; (8000b88 <main+0x184>)
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4849      	ldr	r0, [pc, #292]	; (8000b78 <main+0x174>)
 8000a52:	f7ff fe45 	bl	80006e0 <Lcd_define_char>
	  Lcd_define_char(&lcd,1,two);
 8000a56:	4a4d      	ldr	r2, [pc, #308]	; (8000b8c <main+0x188>)
 8000a58:	2101      	movs	r1, #1
 8000a5a:	4847      	ldr	r0, [pc, #284]	; (8000b78 <main+0x174>)
 8000a5c:	f7ff fe40 	bl	80006e0 <Lcd_define_char>
	  Lcd_define_char(&lcd,2,three);
 8000a60:	4a4b      	ldr	r2, [pc, #300]	; (8000b90 <main+0x18c>)
 8000a62:	2102      	movs	r1, #2
 8000a64:	4844      	ldr	r0, [pc, #272]	; (8000b78 <main+0x174>)
 8000a66:	f7ff fe3b 	bl	80006e0 <Lcd_define_char>
	  Lcd_define_char(&lcd,3,four);
 8000a6a:	4a4a      	ldr	r2, [pc, #296]	; (8000b94 <main+0x190>)
 8000a6c:	2103      	movs	r1, #3
 8000a6e:	4842      	ldr	r0, [pc, #264]	; (8000b78 <main+0x174>)
 8000a70:	f7ff fe36 	bl	80006e0 <Lcd_define_char>
	  Lcd_define_char(&lcd,4,five);
 8000a74:	4a48      	ldr	r2, [pc, #288]	; (8000b98 <main+0x194>)
 8000a76:	2104      	movs	r1, #4
 8000a78:	483f      	ldr	r0, [pc, #252]	; (8000b78 <main+0x174>)
 8000a7a:	f7ff fe31 	bl	80006e0 <Lcd_define_char>
	  TIM1->CCR1 = 90;
 8000a7e:	4b47      	ldr	r3, [pc, #284]	; (8000b9c <main+0x198>)
 8000a80:	225a      	movs	r2, #90	; 0x5a
 8000a82:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000a84:	2100      	movs	r1, #0
 8000a86:	4846      	ldr	r0, [pc, #280]	; (8000ba0 <main+0x19c>)
 8000a88:	f001 fc24 	bl	80022d4 <HAL_TIM_PWM_Start>
	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4845      	ldr	r0, [pc, #276]	; (8000ba4 <main+0x1a0>)
 8000a90:	f001 fd2a 	bl	80024e8 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000a94:	2104      	movs	r1, #4
 8000a96:	4843      	ldr	r0, [pc, #268]	; (8000ba4 <main+0x1a0>)
 8000a98:	f001 fd26 	bl	80024e8 <HAL_TIM_IC_Start_IT>
	  while (1)
	  {
	    /* USER CODE END WHILE */

	    /* USER CODE BEGIN 3 */
		  Lcd_cursor(&lcd, 0,0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4835      	ldr	r0, [pc, #212]	; (8000b78 <main+0x174>)
 8000aa2:	f7ff fe03 	bl	80006ac <Lcd_cursor>
		  Lcd_string(&lcd, "freq=");
 8000aa6:	4940      	ldr	r1, [pc, #256]	; (8000ba8 <main+0x1a4>)
 8000aa8:	4833      	ldr	r0, [pc, #204]	; (8000b78 <main+0x174>)
 8000aaa:	f7ff fddf 	bl	800066c <Lcd_string>
		  Lcd_int(&lcd, frequency);
 8000aae:	4b3f      	ldr	r3, [pc, #252]	; (8000bac <main+0x1a8>)
 8000ab0:	edd3 7a00 	vldr	s15, [r3]
 8000ab4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ab8:	ee17 1a90 	vmov	r1, s15
 8000abc:	482e      	ldr	r0, [pc, #184]	; (8000b78 <main+0x174>)
 8000abe:	f7ff fdbd 	bl	800063c <Lcd_int>
		  Lcd_cursor(&lcd, 1,0);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	482c      	ldr	r0, [pc, #176]	; (8000b78 <main+0x174>)
 8000ac8:	f7ff fdf0 	bl	80006ac <Lcd_cursor>
		  Lcd_int(&lcd,usWidth);
 8000acc:	4b38      	ldr	r3, [pc, #224]	; (8000bb0 <main+0x1ac>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4829      	ldr	r0, [pc, #164]	; (8000b78 <main+0x174>)
 8000ad4:	f7ff fdb2 	bl	800063c <Lcd_int>
		  lcd_write_data(&lcd, '%');
 8000ad8:	2125      	movs	r1, #37	; 0x25
 8000ada:	4827      	ldr	r0, [pc, #156]	; (8000b78 <main+0x174>)
 8000adc:	f7ff fe59 	bl	8000792 <lcd_write_data>
		  for(int i=0;i<16;i++)
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61fb      	str	r3, [r7, #28]
 8000ae4:	e043      	b.n	8000b6e <main+0x16a>
		  {
			  Lcd_cursor(&lcd, 1, i+3);
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	3303      	adds	r3, #3
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	461a      	mov	r2, r3
 8000af0:	2101      	movs	r1, #1
 8000af2:	4821      	ldr	r0, [pc, #132]	; (8000b78 <main+0x174>)
 8000af4:	f7ff fdda 	bl	80006ac <Lcd_cursor>
			  if(usWidth>=0 && usWidth <=20)
 8000af8:	4b2d      	ldr	r3, [pc, #180]	; (8000bb0 <main+0x1ac>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b14      	cmp	r3, #20
 8000afe:	d804      	bhi.n	8000b0a <main+0x106>
			  {
				  lcd_write_data(&lcd,0);
 8000b00:	2100      	movs	r1, #0
 8000b02:	481d      	ldr	r0, [pc, #116]	; (8000b78 <main+0x174>)
 8000b04:	f7ff fe45 	bl	8000792 <lcd_write_data>
 8000b08:	e02e      	b.n	8000b68 <main+0x164>
			  }else if(usWidth>20 && usWidth <=40)
 8000b0a:	4b29      	ldr	r3, [pc, #164]	; (8000bb0 <main+0x1ac>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2b14      	cmp	r3, #20
 8000b10:	d908      	bls.n	8000b24 <main+0x120>
 8000b12:	4b27      	ldr	r3, [pc, #156]	; (8000bb0 <main+0x1ac>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2b28      	cmp	r3, #40	; 0x28
 8000b18:	d804      	bhi.n	8000b24 <main+0x120>
			  {
				  lcd_write_data(&lcd,1);
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	4816      	ldr	r0, [pc, #88]	; (8000b78 <main+0x174>)
 8000b1e:	f7ff fe38 	bl	8000792 <lcd_write_data>
 8000b22:	e021      	b.n	8000b68 <main+0x164>
			  }else if(usWidth>40 && usWidth <=60)
 8000b24:	4b22      	ldr	r3, [pc, #136]	; (8000bb0 <main+0x1ac>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b28      	cmp	r3, #40	; 0x28
 8000b2a:	d908      	bls.n	8000b3e <main+0x13a>
 8000b2c:	4b20      	ldr	r3, [pc, #128]	; (8000bb0 <main+0x1ac>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b3c      	cmp	r3, #60	; 0x3c
 8000b32:	d804      	bhi.n	8000b3e <main+0x13a>
			  {
				  lcd_write_data(&lcd,2);
 8000b34:	2102      	movs	r1, #2
 8000b36:	4810      	ldr	r0, [pc, #64]	; (8000b78 <main+0x174>)
 8000b38:	f7ff fe2b 	bl	8000792 <lcd_write_data>
 8000b3c:	e014      	b.n	8000b68 <main+0x164>
			  }else if(usWidth>60 && usWidth <=80)
 8000b3e:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <main+0x1ac>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2b3c      	cmp	r3, #60	; 0x3c
 8000b44:	d908      	bls.n	8000b58 <main+0x154>
 8000b46:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <main+0x1ac>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2b50      	cmp	r3, #80	; 0x50
 8000b4c:	d804      	bhi.n	8000b58 <main+0x154>
			  {
				  lcd_write_data(&lcd,3);
 8000b4e:	2103      	movs	r1, #3
 8000b50:	4809      	ldr	r0, [pc, #36]	; (8000b78 <main+0x174>)
 8000b52:	f7ff fe1e 	bl	8000792 <lcd_write_data>
 8000b56:	e007      	b.n	8000b68 <main+0x164>
			  }else if(usWidth>80 )
 8000b58:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <main+0x1ac>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2b50      	cmp	r3, #80	; 0x50
 8000b5e:	d903      	bls.n	8000b68 <main+0x164>
			  {
				  lcd_write_data(&lcd,4);
 8000b60:	2104      	movs	r1, #4
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <main+0x174>)
 8000b64:	f7ff fe15 	bl	8000792 <lcd_write_data>
		  for(int i=0;i<16;i++)
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	61fb      	str	r3, [r7, #28]
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	2b0f      	cmp	r3, #15
 8000b72:	ddb8      	ble.n	8000ae6 <main+0xe2>
		  Lcd_cursor(&lcd, 0,0);
 8000b74:	e792      	b.n	8000a9c <main+0x98>
 8000b76:	bf00      	nop
 8000b78:	2000015c 	.word	0x2000015c
 8000b7c:	40020400 	.word	0x40020400
 8000b80:	20000010 	.word	0x20000010
 8000b84:	20000000 	.word	0x20000000
 8000b88:	20000018 	.word	0x20000018
 8000b8c:	20000020 	.word	0x20000020
 8000b90:	20000028 	.word	0x20000028
 8000b94:	20000030 	.word	0x20000030
 8000b98:	20000038 	.word	0x20000038
 8000b9c:	40010000 	.word	0x40010000
 8000ba0:	200000cc 	.word	0x200000cc
 8000ba4:	20000114 	.word	0x20000114
 8000ba8:	08004128 	.word	0x08004128
 8000bac:	20000184 	.word	0x20000184
 8000bb0:	20000198 	.word	0x20000198

08000bb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b094      	sub	sp, #80	; 0x50
 8000bb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bba:	f107 0320 	add.w	r3, r7, #32
 8000bbe:	2230      	movs	r2, #48	; 0x30
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f002 fe2c 	bl	8003820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc8:	f107 030c 	add.w	r3, r7, #12
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	4b23      	ldr	r3, [pc, #140]	; (8000c6c <SystemClock_Config+0xb8>)
 8000bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be0:	4a22      	ldr	r2, [pc, #136]	; (8000c6c <SystemClock_Config+0xb8>)
 8000be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be6:	6413      	str	r3, [r2, #64]	; 0x40
 8000be8:	4b20      	ldr	r3, [pc, #128]	; (8000c6c <SystemClock_Config+0xb8>)
 8000bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <SystemClock_Config+0xbc>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c00:	4a1b      	ldr	r2, [pc, #108]	; (8000c70 <SystemClock_Config+0xbc>)
 8000c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <SystemClock_Config+0xbc>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c14:	2302      	movs	r3, #2
 8000c16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c1c:	2310      	movs	r3, #16
 8000c1e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c24:	f107 0320 	add.w	r3, r7, #32
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f000 fe47 	bl	80018bc <HAL_RCC_OscConfig>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000c34:	f000 f98a 	bl	8000f4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c38:	230f      	movs	r3, #15
 8000c3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c4c:	f107 030c 	add.w	r3, r7, #12
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f001 f8aa 	bl	8001dac <HAL_RCC_ClockConfig>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c5e:	f000 f975 	bl	8000f4c <Error_Handler>
  }
}
 8000c62:	bf00      	nop
 8000c64:	3750      	adds	r7, #80	; 0x50
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40007000 	.word	0x40007000

08000c74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b096      	sub	sp, #88	; 0x58
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]
 8000ca2:	615a      	str	r2, [r3, #20]
 8000ca4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	2220      	movs	r2, #32
 8000caa:	2100      	movs	r1, #0
 8000cac:	4618      	mov	r0, r3
 8000cae:	f002 fdb7 	bl	8003820 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cb2:	4b3e      	ldr	r3, [pc, #248]	; (8000dac <MX_TIM1_Init+0x138>)
 8000cb4:	4a3e      	ldr	r2, [pc, #248]	; (8000db0 <MX_TIM1_Init+0x13c>)
 8000cb6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32-1;
 8000cb8:	4b3c      	ldr	r3, [pc, #240]	; (8000dac <MX_TIM1_Init+0x138>)
 8000cba:	221f      	movs	r2, #31
 8000cbc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cbe:	4b3b      	ldr	r3, [pc, #236]	; (8000dac <MX_TIM1_Init+0x138>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000cc4:	4b39      	ldr	r3, [pc, #228]	; (8000dac <MX_TIM1_Init+0x138>)
 8000cc6:	2263      	movs	r2, #99	; 0x63
 8000cc8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cca:	4b38      	ldr	r3, [pc, #224]	; (8000dac <MX_TIM1_Init+0x138>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cd0:	4b36      	ldr	r3, [pc, #216]	; (8000dac <MX_TIM1_Init+0x138>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd6:	4b35      	ldr	r3, [pc, #212]	; (8000dac <MX_TIM1_Init+0x138>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cdc:	4833      	ldr	r0, [pc, #204]	; (8000dac <MX_TIM1_Init+0x138>)
 8000cde:	f001 fa51 	bl	8002184 <HAL_TIM_Base_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000ce8:	f000 f930 	bl	8000f4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cf2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	482c      	ldr	r0, [pc, #176]	; (8000dac <MX_TIM1_Init+0x138>)
 8000cfa:	f001 ff75 	bl	8002be8 <HAL_TIM_ConfigClockSource>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000d04:	f000 f922 	bl	8000f4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d08:	4828      	ldr	r0, [pc, #160]	; (8000dac <MX_TIM1_Init+0x138>)
 8000d0a:	f001 fa8a 	bl	8002222 <HAL_TIM_PWM_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000d14:	f000 f91a 	bl	8000f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d24:	4619      	mov	r1, r3
 8000d26:	4821      	ldr	r0, [pc, #132]	; (8000dac <MX_TIM1_Init+0x138>)
 8000d28:	f002 fc7c 	bl	8003624 <HAL_TIMEx_MasterConfigSynchronization>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000d32:	f000 f90b 	bl	8000f4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d36:	2360      	movs	r3, #96	; 0x60
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d42:	2300      	movs	r3, #0
 8000d44:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d56:	2200      	movs	r2, #0
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4814      	ldr	r0, [pc, #80]	; (8000dac <MX_TIM1_Init+0x138>)
 8000d5c:	f001 fe82 	bl	8002a64 <HAL_TIM_PWM_ConfigChannel>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000d66:	f000 f8f1 	bl	8000f4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d82:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4807      	ldr	r0, [pc, #28]	; (8000dac <MX_TIM1_Init+0x138>)
 8000d8e:	f002 fcb7 	bl	8003700 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000d98:	f000 f8d8 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d9c:	4803      	ldr	r0, [pc, #12]	; (8000dac <MX_TIM1_Init+0x138>)
 8000d9e:	f000 f967 	bl	8001070 <HAL_TIM_MspPostInit>

}
 8000da2:	bf00      	nop
 8000da4:	3758      	adds	r7, #88	; 0x58
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	200000cc 	.word	0x200000cc
 8000db0:	40010000 	.word	0x40010000

08000db4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dba:	f107 0318 	add.w	r3, r7, #24
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc8:	f107 0310 	add.w	r3, r7, #16
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000dd2:	463b      	mov	r3, r7
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dde:	4b32      	ldr	r3, [pc, #200]	; (8000ea8 <MX_TIM2_Init+0xf4>)
 8000de0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000de4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8000de6:	4b30      	ldr	r3, [pc, #192]	; (8000ea8 <MX_TIM2_Init+0xf4>)
 8000de8:	221f      	movs	r2, #31
 8000dea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dec:	4b2e      	ldr	r3, [pc, #184]	; (8000ea8 <MX_TIM2_Init+0xf4>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000df2:	4b2d      	ldr	r3, [pc, #180]	; (8000ea8 <MX_TIM2_Init+0xf4>)
 8000df4:	f04f 32ff 	mov.w	r2, #4294967295
 8000df8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dfa:	4b2b      	ldr	r3, [pc, #172]	; (8000ea8 <MX_TIM2_Init+0xf4>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e00:	4b29      	ldr	r3, [pc, #164]	; (8000ea8 <MX_TIM2_Init+0xf4>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e06:	4828      	ldr	r0, [pc, #160]	; (8000ea8 <MX_TIM2_Init+0xf4>)
 8000e08:	f001 f9bc 	bl	8002184 <HAL_TIM_Base_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000e12:	f000 f89b 	bl	8000f4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e1a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e1c:	f107 0318 	add.w	r3, r7, #24
 8000e20:	4619      	mov	r1, r3
 8000e22:	4821      	ldr	r0, [pc, #132]	; (8000ea8 <MX_TIM2_Init+0xf4>)
 8000e24:	f001 fee0 	bl	8002be8 <HAL_TIM_ConfigClockSource>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000e2e:	f000 f88d 	bl	8000f4c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000e32:	481d      	ldr	r0, [pc, #116]	; (8000ea8 <MX_TIM2_Init+0xf4>)
 8000e34:	f001 fafe 	bl	8002434 <HAL_TIM_IC_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e3e:	f000 f885 	bl	8000f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e4a:	f107 0310 	add.w	r3, r7, #16
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4815      	ldr	r0, [pc, #84]	; (8000ea8 <MX_TIM2_Init+0xf4>)
 8000e52:	f002 fbe7 	bl	8003624 <HAL_TIMEx_MasterConfigSynchronization>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000e5c:	f000 f876 	bl	8000f4c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e60:	2300      	movs	r3, #0
 8000e62:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e64:	2301      	movs	r3, #1
 8000e66:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e70:	463b      	mov	r3, r7
 8000e72:	2200      	movs	r2, #0
 8000e74:	4619      	mov	r1, r3
 8000e76:	480c      	ldr	r0, [pc, #48]	; (8000ea8 <MX_TIM2_Init+0xf4>)
 8000e78:	f001 fd58 	bl	800292c <HAL_TIM_IC_ConfigChannel>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000e82:	f000 f863 	bl	8000f4c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000e86:	230a      	movs	r3, #10
 8000e88:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	2204      	movs	r2, #4
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <MX_TIM2_Init+0xf4>)
 8000e92:	f001 fd4b 	bl	800292c <HAL_TIM_IC_ConfigChannel>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8000e9c:	f000 f856 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ea0:	bf00      	nop
 8000ea2:	3728      	adds	r7, #40	; 0x28
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000114 	.word	0x20000114

08000eac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb2:	f107 030c 	add.w	r3, r7, #12
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <MX_GPIO_Init+0x98>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a1e      	ldr	r2, [pc, #120]	; (8000f44 <MX_GPIO_Init+0x98>)
 8000ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <MX_GPIO_Init+0x98>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	607b      	str	r3, [r7, #4]
 8000ee2:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <MX_GPIO_Init+0x98>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a17      	ldr	r2, [pc, #92]	; (8000f44 <MX_GPIO_Init+0x98>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <MX_GPIO_Init+0x98>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	603b      	str	r3, [r7, #0]
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <MX_GPIO_Init+0x98>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a10      	ldr	r2, [pc, #64]	; (8000f44 <MX_GPIO_Init+0x98>)
 8000f04:	f043 0302 	orr.w	r3, r3, #2
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <MX_GPIO_Init+0x98>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f16:	2200      	movs	r2, #0
 8000f18:	213f      	movs	r1, #63	; 0x3f
 8000f1a:	480b      	ldr	r0, [pc, #44]	; (8000f48 <MX_GPIO_Init+0x9c>)
 8000f1c:	f000 fcb4 	bl	8001888 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB0 PB1 PB2 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f20:	233f      	movs	r3, #63	; 0x3f
 8000f22:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f24:	2301      	movs	r3, #1
 8000f26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	4619      	mov	r1, r3
 8000f36:	4804      	ldr	r0, [pc, #16]	; (8000f48 <MX_GPIO_Init+0x9c>)
 8000f38:	f000 fb22 	bl	8001580 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f3c:	bf00      	nop
 8000f3e:	3720      	adds	r7, #32
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40020400 	.word	0x40020400

08000f4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f50:	b672      	cpsid	i
}
 8000f52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <Error_Handler+0x8>
	...

08000f58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	4a0f      	ldr	r2, [pc, #60]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	603b      	str	r3, [r7, #0]
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	4a08      	ldr	r2, [pc, #32]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f88:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f92:	603b      	str	r3, [r7, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	40023800 	.word	0x40023800

08000fa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	; 0x28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a27      	ldr	r2, [pc, #156]	; (8001064 <HAL_TIM_Base_MspInit+0xbc>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d10e      	bne.n	8000fe8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	4b26      	ldr	r3, [pc, #152]	; (8001068 <HAL_TIM_Base_MspInit+0xc0>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	4a25      	ldr	r2, [pc, #148]	; (8001068 <HAL_TIM_Base_MspInit+0xc0>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fda:	4b23      	ldr	r3, [pc, #140]	; (8001068 <HAL_TIM_Base_MspInit+0xc0>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fe6:	e038      	b.n	800105a <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM2)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ff0:	d133      	bne.n	800105a <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <HAL_TIM_Base_MspInit+0xc0>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	4a1b      	ldr	r2, [pc, #108]	; (8001068 <HAL_TIM_Base_MspInit+0xc0>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6413      	str	r3, [r2, #64]	; 0x40
 8001002:	4b19      	ldr	r3, [pc, #100]	; (8001068 <HAL_TIM_Base_MspInit+0xc0>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	4b15      	ldr	r3, [pc, #84]	; (8001068 <HAL_TIM_Base_MspInit+0xc0>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a14      	ldr	r2, [pc, #80]	; (8001068 <HAL_TIM_Base_MspInit+0xc0>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b12      	ldr	r3, [pc, #72]	; (8001068 <HAL_TIM_Base_MspInit+0xc0>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800102a:	2303      	movs	r3, #3
 800102c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800103a:	2301      	movs	r3, #1
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	4809      	ldr	r0, [pc, #36]	; (800106c <HAL_TIM_Base_MspInit+0xc4>)
 8001046:	f000 fa9b 	bl	8001580 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2100      	movs	r1, #0
 800104e:	201c      	movs	r0, #28
 8001050:	f000 fa5f 	bl	8001512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001054:	201c      	movs	r0, #28
 8001056:	f000 fa78 	bl	800154a <HAL_NVIC_EnableIRQ>
}
 800105a:	bf00      	nop
 800105c:	3728      	adds	r7, #40	; 0x28
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40010000 	.word	0x40010000
 8001068:	40023800 	.word	0x40023800
 800106c:	40020000 	.word	0x40020000

08001070 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <HAL_TIM_MspPostInit+0x68>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d11e      	bne.n	80010d0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <HAL_TIM_MspPostInit+0x6c>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a10      	ldr	r2, [pc, #64]	; (80010dc <HAL_TIM_MspPostInit+0x6c>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <HAL_TIM_MspPostInit+0x6c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	4619      	mov	r1, r3
 80010ca:	4805      	ldr	r0, [pc, #20]	; (80010e0 <HAL_TIM_MspPostInit+0x70>)
 80010cc:	f000 fa58 	bl	8001580 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80010d0:	bf00      	nop
 80010d2:	3720      	adds	r7, #32
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40010000 	.word	0x40010000
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40020000 	.word	0x40020000

080010e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <NMI_Handler+0x4>

080010ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <HardFault_Handler+0x4>

080010f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <MemManage_Handler+0x4>

080010f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fa:	e7fe      	b.n	80010fa <BusFault_Handler+0x4>

080010fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <UsageFault_Handler+0x4>

08001102 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001130:	f000 f8d0 	bl	80012d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}

08001138 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800113c:	4802      	ldr	r0, [pc, #8]	; (8001148 <TIM2_IRQHandler+0x10>)
 800113e:	f001 faed 	bl	800271c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000114 	.word	0x20000114

0800114c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001154:	4a14      	ldr	r2, [pc, #80]	; (80011a8 <_sbrk+0x5c>)
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <_sbrk+0x60>)
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001160:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <_sbrk+0x64>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d102      	bne.n	800116e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <_sbrk+0x64>)
 800116a:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <_sbrk+0x68>)
 800116c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <_sbrk+0x64>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	429a      	cmp	r2, r3
 800117a:	d207      	bcs.n	800118c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800117c:	f002 fb26 	bl	80037cc <__errno>
 8001180:	4603      	mov	r3, r0
 8001182:	220c      	movs	r2, #12
 8001184:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001186:	f04f 33ff 	mov.w	r3, #4294967295
 800118a:	e009      	b.n	80011a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <_sbrk+0x64>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001192:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <_sbrk+0x64>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	4a05      	ldr	r2, [pc, #20]	; (80011b0 <_sbrk+0x64>)
 800119c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800119e:	68fb      	ldr	r3, [r7, #12]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20010000 	.word	0x20010000
 80011ac:	00000400 	.word	0x00000400
 80011b0:	2000019c 	.word	0x2000019c
 80011b4:	200001b8 	.word	0x200001b8

080011b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <SystemInit+0x20>)
 80011be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011c2:	4a05      	ldr	r2, [pc, #20]	; (80011d8 <SystemInit+0x20>)
 80011c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001214 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011e0:	480d      	ldr	r0, [pc, #52]	; (8001218 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011e2:	490e      	ldr	r1, [pc, #56]	; (800121c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011e4:	4a0e      	ldr	r2, [pc, #56]	; (8001220 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e8:	e002      	b.n	80011f0 <LoopCopyDataInit>

080011ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ee:	3304      	adds	r3, #4

080011f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f4:	d3f9      	bcc.n	80011ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f6:	4a0b      	ldr	r2, [pc, #44]	; (8001224 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011f8:	4c0b      	ldr	r4, [pc, #44]	; (8001228 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011fc:	e001      	b.n	8001202 <LoopFillZerobss>

080011fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001200:	3204      	adds	r2, #4

08001202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001204:	d3fb      	bcc.n	80011fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001206:	f7ff ffd7 	bl	80011b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800120a:	f002 fae5 	bl	80037d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800120e:	f7ff fbf9 	bl	8000a04 <main>
  bx  lr    
 8001212:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001214:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800121c:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8001220:	08004188 	.word	0x08004188
  ldr r2, =_sbss
 8001224:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8001228:	200001b4 	.word	0x200001b4

0800122c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800122c:	e7fe      	b.n	800122c <ADC_IRQHandler>
	...

08001230 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001234:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <HAL_Init+0x40>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a0d      	ldr	r2, [pc, #52]	; (8001270 <HAL_Init+0x40>)
 800123a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800123e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <HAL_Init+0x40>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <HAL_Init+0x40>)
 8001246:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800124a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800124c:	4b08      	ldr	r3, [pc, #32]	; (8001270 <HAL_Init+0x40>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a07      	ldr	r2, [pc, #28]	; (8001270 <HAL_Init+0x40>)
 8001252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001256:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001258:	2003      	movs	r0, #3
 800125a:	f000 f94f 	bl	80014fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800125e:	200f      	movs	r0, #15
 8001260:	f000 f808 	bl	8001274 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001264:	f7ff fe78 	bl	8000f58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40023c00 	.word	0x40023c00

08001274 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <HAL_InitTick+0x54>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <HAL_InitTick+0x58>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	4619      	mov	r1, r3
 8001286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128a:	fbb3 f3f1 	udiv	r3, r3, r1
 800128e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001292:	4618      	mov	r0, r3
 8001294:	f000 f967 	bl	8001566 <HAL_SYSTICK_Config>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e00e      	b.n	80012c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b0f      	cmp	r3, #15
 80012a6:	d80a      	bhi.n	80012be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a8:	2200      	movs	r2, #0
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	f04f 30ff 	mov.w	r0, #4294967295
 80012b0:	f000 f92f 	bl	8001512 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012b4:	4a06      	ldr	r2, [pc, #24]	; (80012d0 <HAL_InitTick+0x5c>)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	e000      	b.n	80012c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000040 	.word	0x20000040
 80012cc:	20000048 	.word	0x20000048
 80012d0:	20000044 	.word	0x20000044

080012d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <HAL_IncTick+0x20>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	461a      	mov	r2, r3
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_IncTick+0x24>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4413      	add	r3, r2
 80012e4:	4a04      	ldr	r2, [pc, #16]	; (80012f8 <HAL_IncTick+0x24>)
 80012e6:	6013      	str	r3, [r2, #0]
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	20000048 	.word	0x20000048
 80012f8:	200001a0 	.word	0x200001a0

080012fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001300:	4b03      	ldr	r3, [pc, #12]	; (8001310 <HAL_GetTick+0x14>)
 8001302:	681b      	ldr	r3, [r3, #0]
}
 8001304:	4618      	mov	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	200001a0 	.word	0x200001a0

08001314 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800131c:	f7ff ffee 	bl	80012fc <HAL_GetTick>
 8001320:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800132c:	d005      	beq.n	800133a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800132e:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <HAL_Delay+0x44>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4413      	add	r3, r2
 8001338:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800133a:	bf00      	nop
 800133c:	f7ff ffde 	bl	80012fc <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	429a      	cmp	r2, r3
 800134a:	d8f7      	bhi.n	800133c <HAL_Delay+0x28>
  {
  }
}
 800134c:	bf00      	nop
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000048 	.word	0x20000048

0800135c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <__NVIC_SetPriorityGrouping+0x44>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001372:	68ba      	ldr	r2, [r7, #8]
 8001374:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001378:	4013      	ands	r3, r2
 800137a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001384:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800138c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800138e:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	60d3      	str	r3, [r2, #12]
}
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <__NVIC_GetPriorityGrouping+0x18>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	0a1b      	lsrs	r3, r3, #8
 80013ae:	f003 0307 	and.w	r3, r3, #7
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	db0b      	blt.n	80013ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	f003 021f 	and.w	r2, r3, #31
 80013d8:	4907      	ldr	r1, [pc, #28]	; (80013f8 <__NVIC_EnableIRQ+0x38>)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	095b      	lsrs	r3, r3, #5
 80013e0:	2001      	movs	r0, #1
 80013e2:	fa00 f202 	lsl.w	r2, r0, r2
 80013e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000e100 	.word	0xe000e100

080013fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	6039      	str	r1, [r7, #0]
 8001406:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140c:	2b00      	cmp	r3, #0
 800140e:	db0a      	blt.n	8001426 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	b2da      	uxtb	r2, r3
 8001414:	490c      	ldr	r1, [pc, #48]	; (8001448 <__NVIC_SetPriority+0x4c>)
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	0112      	lsls	r2, r2, #4
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	440b      	add	r3, r1
 8001420:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001424:	e00a      	b.n	800143c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	b2da      	uxtb	r2, r3
 800142a:	4908      	ldr	r1, [pc, #32]	; (800144c <__NVIC_SetPriority+0x50>)
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	f003 030f 	and.w	r3, r3, #15
 8001432:	3b04      	subs	r3, #4
 8001434:	0112      	lsls	r2, r2, #4
 8001436:	b2d2      	uxtb	r2, r2
 8001438:	440b      	add	r3, r1
 800143a:	761a      	strb	r2, [r3, #24]
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	e000e100 	.word	0xe000e100
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001450:	b480      	push	{r7}
 8001452:	b089      	sub	sp, #36	; 0x24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	f1c3 0307 	rsb	r3, r3, #7
 800146a:	2b04      	cmp	r3, #4
 800146c:	bf28      	it	cs
 800146e:	2304      	movcs	r3, #4
 8001470:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3304      	adds	r3, #4
 8001476:	2b06      	cmp	r3, #6
 8001478:	d902      	bls.n	8001480 <NVIC_EncodePriority+0x30>
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3b03      	subs	r3, #3
 800147e:	e000      	b.n	8001482 <NVIC_EncodePriority+0x32>
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001484:	f04f 32ff 	mov.w	r2, #4294967295
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43da      	mvns	r2, r3
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	401a      	ands	r2, r3
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001498:	f04f 31ff 	mov.w	r1, #4294967295
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	fa01 f303 	lsl.w	r3, r1, r3
 80014a2:	43d9      	mvns	r1, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a8:	4313      	orrs	r3, r2
         );
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3724      	adds	r7, #36	; 0x24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
	...

080014b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014c8:	d301      	bcc.n	80014ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ca:	2301      	movs	r3, #1
 80014cc:	e00f      	b.n	80014ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ce:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <SysTick_Config+0x40>)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014d6:	210f      	movs	r1, #15
 80014d8:	f04f 30ff 	mov.w	r0, #4294967295
 80014dc:	f7ff ff8e 	bl	80013fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <SysTick_Config+0x40>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014e6:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <SysTick_Config+0x40>)
 80014e8:	2207      	movs	r2, #7
 80014ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	e000e010 	.word	0xe000e010

080014fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff ff29 	bl	800135c <__NVIC_SetPriorityGrouping>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001512:	b580      	push	{r7, lr}
 8001514:	b086      	sub	sp, #24
 8001516:	af00      	add	r7, sp, #0
 8001518:	4603      	mov	r3, r0
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	607a      	str	r2, [r7, #4]
 800151e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001524:	f7ff ff3e 	bl	80013a4 <__NVIC_GetPriorityGrouping>
 8001528:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	68b9      	ldr	r1, [r7, #8]
 800152e:	6978      	ldr	r0, [r7, #20]
 8001530:	f7ff ff8e 	bl	8001450 <NVIC_EncodePriority>
 8001534:	4602      	mov	r2, r0
 8001536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153a:	4611      	mov	r1, r2
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ff5d 	bl	80013fc <__NVIC_SetPriority>
}
 8001542:	bf00      	nop
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	4603      	mov	r3, r0
 8001552:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff ff31 	bl	80013c0 <__NVIC_EnableIRQ>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff ffa2 	bl	80014b8 <SysTick_Config>
 8001574:	4603      	mov	r3, r0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001580:	b480      	push	{r7}
 8001582:	b089      	sub	sp, #36	; 0x24
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001592:	2300      	movs	r3, #0
 8001594:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
 800159a:	e159      	b.n	8001850 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800159c:	2201      	movs	r2, #1
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	4013      	ands	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	f040 8148 	bne.w	800184a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f003 0303 	and.w	r3, r3, #3
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d005      	beq.n	80015d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d130      	bne.n	8001634 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	2203      	movs	r2, #3
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43db      	mvns	r3, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4013      	ands	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	68da      	ldr	r2, [r3, #12]
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001608:	2201      	movs	r2, #1
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	091b      	lsrs	r3, r3, #4
 800161e:	f003 0201 	and.w	r2, r3, #1
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 0303 	and.w	r3, r3, #3
 800163c:	2b03      	cmp	r3, #3
 800163e:	d017      	beq.n	8001670 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	2203      	movs	r2, #3
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 0303 	and.w	r3, r3, #3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d123      	bne.n	80016c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	08da      	lsrs	r2, r3, #3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3208      	adds	r2, #8
 8001684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001688:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	220f      	movs	r2, #15
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	691a      	ldr	r2, [r3, #16]
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	08da      	lsrs	r2, r3, #3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	3208      	adds	r2, #8
 80016be:	69b9      	ldr	r1, [r7, #24]
 80016c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	2203      	movs	r2, #3
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4013      	ands	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 0203 	and.w	r2, r3, #3
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001700:	2b00      	cmp	r3, #0
 8001702:	f000 80a2 	beq.w	800184a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	4b57      	ldr	r3, [pc, #348]	; (8001868 <HAL_GPIO_Init+0x2e8>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	4a56      	ldr	r2, [pc, #344]	; (8001868 <HAL_GPIO_Init+0x2e8>)
 8001710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001714:	6453      	str	r3, [r2, #68]	; 0x44
 8001716:	4b54      	ldr	r3, [pc, #336]	; (8001868 <HAL_GPIO_Init+0x2e8>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001722:	4a52      	ldr	r2, [pc, #328]	; (800186c <HAL_GPIO_Init+0x2ec>)
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	089b      	lsrs	r3, r3, #2
 8001728:	3302      	adds	r3, #2
 800172a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	220f      	movs	r2, #15
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4013      	ands	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a49      	ldr	r2, [pc, #292]	; (8001870 <HAL_GPIO_Init+0x2f0>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d019      	beq.n	8001782 <HAL_GPIO_Init+0x202>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a48      	ldr	r2, [pc, #288]	; (8001874 <HAL_GPIO_Init+0x2f4>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d013      	beq.n	800177e <HAL_GPIO_Init+0x1fe>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a47      	ldr	r2, [pc, #284]	; (8001878 <HAL_GPIO_Init+0x2f8>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d00d      	beq.n	800177a <HAL_GPIO_Init+0x1fa>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a46      	ldr	r2, [pc, #280]	; (800187c <HAL_GPIO_Init+0x2fc>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d007      	beq.n	8001776 <HAL_GPIO_Init+0x1f6>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a45      	ldr	r2, [pc, #276]	; (8001880 <HAL_GPIO_Init+0x300>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d101      	bne.n	8001772 <HAL_GPIO_Init+0x1f2>
 800176e:	2304      	movs	r3, #4
 8001770:	e008      	b.n	8001784 <HAL_GPIO_Init+0x204>
 8001772:	2307      	movs	r3, #7
 8001774:	e006      	b.n	8001784 <HAL_GPIO_Init+0x204>
 8001776:	2303      	movs	r3, #3
 8001778:	e004      	b.n	8001784 <HAL_GPIO_Init+0x204>
 800177a:	2302      	movs	r3, #2
 800177c:	e002      	b.n	8001784 <HAL_GPIO_Init+0x204>
 800177e:	2301      	movs	r3, #1
 8001780:	e000      	b.n	8001784 <HAL_GPIO_Init+0x204>
 8001782:	2300      	movs	r3, #0
 8001784:	69fa      	ldr	r2, [r7, #28]
 8001786:	f002 0203 	and.w	r2, r2, #3
 800178a:	0092      	lsls	r2, r2, #2
 800178c:	4093      	lsls	r3, r2
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4313      	orrs	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001794:	4935      	ldr	r1, [pc, #212]	; (800186c <HAL_GPIO_Init+0x2ec>)
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	089b      	lsrs	r3, r3, #2
 800179a:	3302      	adds	r3, #2
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017a2:	4b38      	ldr	r3, [pc, #224]	; (8001884 <HAL_GPIO_Init+0x304>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	43db      	mvns	r3, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4013      	ands	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017c6:	4a2f      	ldr	r2, [pc, #188]	; (8001884 <HAL_GPIO_Init+0x304>)
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017cc:	4b2d      	ldr	r3, [pc, #180]	; (8001884 <HAL_GPIO_Init+0x304>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017f0:	4a24      	ldr	r2, [pc, #144]	; (8001884 <HAL_GPIO_Init+0x304>)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017f6:	4b23      	ldr	r3, [pc, #140]	; (8001884 <HAL_GPIO_Init+0x304>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	43db      	mvns	r3, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4013      	ands	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800181a:	4a1a      	ldr	r2, [pc, #104]	; (8001884 <HAL_GPIO_Init+0x304>)
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001820:	4b18      	ldr	r3, [pc, #96]	; (8001884 <HAL_GPIO_Init+0x304>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	43db      	mvns	r3, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	4313      	orrs	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001844:	4a0f      	ldr	r2, [pc, #60]	; (8001884 <HAL_GPIO_Init+0x304>)
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	3301      	adds	r3, #1
 800184e:	61fb      	str	r3, [r7, #28]
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	2b0f      	cmp	r3, #15
 8001854:	f67f aea2 	bls.w	800159c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001858:	bf00      	nop
 800185a:	bf00      	nop
 800185c:	3724      	adds	r7, #36	; 0x24
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	40023800 	.word	0x40023800
 800186c:	40013800 	.word	0x40013800
 8001870:	40020000 	.word	0x40020000
 8001874:	40020400 	.word	0x40020400
 8001878:	40020800 	.word	0x40020800
 800187c:	40020c00 	.word	0x40020c00
 8001880:	40021000 	.word	0x40021000
 8001884:	40013c00 	.word	0x40013c00

08001888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	460b      	mov	r3, r1
 8001892:	807b      	strh	r3, [r7, #2]
 8001894:	4613      	mov	r3, r2
 8001896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001898:	787b      	ldrb	r3, [r7, #1]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800189e:	887a      	ldrh	r2, [r7, #2]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018a4:	e003      	b.n	80018ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018a6:	887b      	ldrh	r3, [r7, #2]
 80018a8:	041a      	lsls	r2, r3, #16
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	619a      	str	r2, [r3, #24]
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
	...

080018bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e267      	b.n	8001d9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d075      	beq.n	80019c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018da:	4b88      	ldr	r3, [pc, #544]	; (8001afc <HAL_RCC_OscConfig+0x240>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f003 030c 	and.w	r3, r3, #12
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	d00c      	beq.n	8001900 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018e6:	4b85      	ldr	r3, [pc, #532]	; (8001afc <HAL_RCC_OscConfig+0x240>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018ee:	2b08      	cmp	r3, #8
 80018f0:	d112      	bne.n	8001918 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018f2:	4b82      	ldr	r3, [pc, #520]	; (8001afc <HAL_RCC_OscConfig+0x240>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018fe:	d10b      	bne.n	8001918 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001900:	4b7e      	ldr	r3, [pc, #504]	; (8001afc <HAL_RCC_OscConfig+0x240>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d05b      	beq.n	80019c4 <HAL_RCC_OscConfig+0x108>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d157      	bne.n	80019c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e242      	b.n	8001d9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001920:	d106      	bne.n	8001930 <HAL_RCC_OscConfig+0x74>
 8001922:	4b76      	ldr	r3, [pc, #472]	; (8001afc <HAL_RCC_OscConfig+0x240>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a75      	ldr	r2, [pc, #468]	; (8001afc <HAL_RCC_OscConfig+0x240>)
 8001928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	e01d      	b.n	800196c <HAL_RCC_OscConfig+0xb0>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001938:	d10c      	bne.n	8001954 <HAL_RCC_OscConfig+0x98>
 800193a:	4b70      	ldr	r3, [pc, #448]	; (8001afc <HAL_RCC_OscConfig+0x240>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a6f      	ldr	r2, [pc, #444]	; (8001afc <HAL_RCC_OscConfig+0x240>)
 8001940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	4b6d      	ldr	r3, [pc, #436]	; (8001afc <HAL_RCC_OscConfig+0x240>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a6c      	ldr	r2, [pc, #432]	; (8001afc <HAL_RCC_OscConfig+0x240>)
 800194c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	e00b      	b.n	800196c <HAL_RCC_OscConfig+0xb0>
 8001954:	4b69      	ldr	r3, [pc, #420]	; (8001afc <HAL_RCC_OscConfig+0x240>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a68      	ldr	r2, [pc, #416]	; (8001afc <HAL_RCC_OscConfig+0x240>)
 800195a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	4b66      	ldr	r3, [pc, #408]	; (8001afc <HAL_RCC_OscConfig+0x240>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a65      	ldr	r2, [pc, #404]	; (8001afc <HAL_RCC_OscConfig+0x240>)
 8001966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800196a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d013      	beq.n	800199c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001974:	f7ff fcc2 	bl	80012fc <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800197c:	f7ff fcbe 	bl	80012fc <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b64      	cmp	r3, #100	; 0x64
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e207      	b.n	8001d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198e:	4b5b      	ldr	r3, [pc, #364]	; (8001afc <HAL_RCC_OscConfig+0x240>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0f0      	beq.n	800197c <HAL_RCC_OscConfig+0xc0>
 800199a:	e014      	b.n	80019c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199c:	f7ff fcae 	bl	80012fc <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019a4:	f7ff fcaa 	bl	80012fc <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b64      	cmp	r3, #100	; 0x64
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e1f3      	b.n	8001d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019b6:	4b51      	ldr	r3, [pc, #324]	; (8001afc <HAL_RCC_OscConfig+0x240>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f0      	bne.n	80019a4 <HAL_RCC_OscConfig+0xe8>
 80019c2:	e000      	b.n	80019c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d063      	beq.n	8001a9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019d2:	4b4a      	ldr	r3, [pc, #296]	; (8001afc <HAL_RCC_OscConfig+0x240>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 030c 	and.w	r3, r3, #12
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00b      	beq.n	80019f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019de:	4b47      	ldr	r3, [pc, #284]	; (8001afc <HAL_RCC_OscConfig+0x240>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019e6:	2b08      	cmp	r3, #8
 80019e8:	d11c      	bne.n	8001a24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ea:	4b44      	ldr	r3, [pc, #272]	; (8001afc <HAL_RCC_OscConfig+0x240>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d116      	bne.n	8001a24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f6:	4b41      	ldr	r3, [pc, #260]	; (8001afc <HAL_RCC_OscConfig+0x240>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d005      	beq.n	8001a0e <HAL_RCC_OscConfig+0x152>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d001      	beq.n	8001a0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e1c7      	b.n	8001d9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0e:	4b3b      	ldr	r3, [pc, #236]	; (8001afc <HAL_RCC_OscConfig+0x240>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	4937      	ldr	r1, [pc, #220]	; (8001afc <HAL_RCC_OscConfig+0x240>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a22:	e03a      	b.n	8001a9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d020      	beq.n	8001a6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a2c:	4b34      	ldr	r3, [pc, #208]	; (8001b00 <HAL_RCC_OscConfig+0x244>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a32:	f7ff fc63 	bl	80012fc <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a3a:	f7ff fc5f 	bl	80012fc <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e1a8      	b.n	8001d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a4c:	4b2b      	ldr	r3, [pc, #172]	; (8001afc <HAL_RCC_OscConfig+0x240>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0f0      	beq.n	8001a3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a58:	4b28      	ldr	r3, [pc, #160]	; (8001afc <HAL_RCC_OscConfig+0x240>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	4925      	ldr	r1, [pc, #148]	; (8001afc <HAL_RCC_OscConfig+0x240>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	600b      	str	r3, [r1, #0]
 8001a6c:	e015      	b.n	8001a9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a6e:	4b24      	ldr	r3, [pc, #144]	; (8001b00 <HAL_RCC_OscConfig+0x244>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a74:	f7ff fc42 	bl	80012fc <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a7c:	f7ff fc3e 	bl	80012fc <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e187      	b.n	8001d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a8e:	4b1b      	ldr	r3, [pc, #108]	; (8001afc <HAL_RCC_OscConfig+0x240>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f0      	bne.n	8001a7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d036      	beq.n	8001b14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d016      	beq.n	8001adc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aae:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <HAL_RCC_OscConfig+0x248>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab4:	f7ff fc22 	bl	80012fc <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001abc:	f7ff fc1e 	bl	80012fc <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e167      	b.n	8001d9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ace:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <HAL_RCC_OscConfig+0x240>)
 8001ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0f0      	beq.n	8001abc <HAL_RCC_OscConfig+0x200>
 8001ada:	e01b      	b.n	8001b14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001adc:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <HAL_RCC_OscConfig+0x248>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae2:	f7ff fc0b 	bl	80012fc <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae8:	e00e      	b.n	8001b08 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aea:	f7ff fc07 	bl	80012fc <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d907      	bls.n	8001b08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e150      	b.n	8001d9e <HAL_RCC_OscConfig+0x4e2>
 8001afc:	40023800 	.word	0x40023800
 8001b00:	42470000 	.word	0x42470000
 8001b04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b08:	4b88      	ldr	r3, [pc, #544]	; (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001b0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1ea      	bne.n	8001aea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 8097 	beq.w	8001c50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b22:	2300      	movs	r3, #0
 8001b24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b26:	4b81      	ldr	r3, [pc, #516]	; (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10f      	bne.n	8001b52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	4b7d      	ldr	r3, [pc, #500]	; (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	4a7c      	ldr	r2, [pc, #496]	; (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b40:	6413      	str	r3, [r2, #64]	; 0x40
 8001b42:	4b7a      	ldr	r3, [pc, #488]	; (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b52:	4b77      	ldr	r3, [pc, #476]	; (8001d30 <HAL_RCC_OscConfig+0x474>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d118      	bne.n	8001b90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b5e:	4b74      	ldr	r3, [pc, #464]	; (8001d30 <HAL_RCC_OscConfig+0x474>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a73      	ldr	r2, [pc, #460]	; (8001d30 <HAL_RCC_OscConfig+0x474>)
 8001b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b6a:	f7ff fbc7 	bl	80012fc <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b72:	f7ff fbc3 	bl	80012fc <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e10c      	b.n	8001d9e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b84:	4b6a      	ldr	r3, [pc, #424]	; (8001d30 <HAL_RCC_OscConfig+0x474>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0f0      	beq.n	8001b72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d106      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x2ea>
 8001b98:	4b64      	ldr	r3, [pc, #400]	; (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9c:	4a63      	ldr	r2, [pc, #396]	; (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba4:	e01c      	b.n	8001be0 <HAL_RCC_OscConfig+0x324>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	2b05      	cmp	r3, #5
 8001bac:	d10c      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x30c>
 8001bae:	4b5f      	ldr	r3, [pc, #380]	; (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb2:	4a5e      	ldr	r2, [pc, #376]	; (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001bb4:	f043 0304 	orr.w	r3, r3, #4
 8001bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8001bba:	4b5c      	ldr	r3, [pc, #368]	; (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbe:	4a5b      	ldr	r2, [pc, #364]	; (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc6:	e00b      	b.n	8001be0 <HAL_RCC_OscConfig+0x324>
 8001bc8:	4b58      	ldr	r3, [pc, #352]	; (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bcc:	4a57      	ldr	r2, [pc, #348]	; (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001bce:	f023 0301 	bic.w	r3, r3, #1
 8001bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd4:	4b55      	ldr	r3, [pc, #340]	; (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd8:	4a54      	ldr	r2, [pc, #336]	; (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001bda:	f023 0304 	bic.w	r3, r3, #4
 8001bde:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d015      	beq.n	8001c14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be8:	f7ff fb88 	bl	80012fc <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bee:	e00a      	b.n	8001c06 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bf0:	f7ff fb84 	bl	80012fc <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e0cb      	b.n	8001d9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c06:	4b49      	ldr	r3, [pc, #292]	; (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0ee      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x334>
 8001c12:	e014      	b.n	8001c3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c14:	f7ff fb72 	bl	80012fc <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c1a:	e00a      	b.n	8001c32 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c1c:	f7ff fb6e 	bl	80012fc <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e0b5      	b.n	8001d9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c32:	4b3e      	ldr	r3, [pc, #248]	; (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1ee      	bne.n	8001c1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c3e:	7dfb      	ldrb	r3, [r7, #23]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d105      	bne.n	8001c50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c44:	4b39      	ldr	r3, [pc, #228]	; (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	4a38      	ldr	r2, [pc, #224]	; (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001c4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 80a1 	beq.w	8001d9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c5a:	4b34      	ldr	r3, [pc, #208]	; (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d05c      	beq.n	8001d20 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d141      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6e:	4b31      	ldr	r3, [pc, #196]	; (8001d34 <HAL_RCC_OscConfig+0x478>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c74:	f7ff fb42 	bl	80012fc <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c7c:	f7ff fb3e 	bl	80012fc <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e087      	b.n	8001d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c8e:	4b27      	ldr	r3, [pc, #156]	; (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f0      	bne.n	8001c7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69da      	ldr	r2, [r3, #28]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca8:	019b      	lsls	r3, r3, #6
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb0:	085b      	lsrs	r3, r3, #1
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	041b      	lsls	r3, r3, #16
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbc:	061b      	lsls	r3, r3, #24
 8001cbe:	491b      	ldr	r1, [pc, #108]	; (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cc4:	4b1b      	ldr	r3, [pc, #108]	; (8001d34 <HAL_RCC_OscConfig+0x478>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cca:	f7ff fb17 	bl	80012fc <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd2:	f7ff fb13 	bl	80012fc <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e05c      	b.n	8001d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce4:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0f0      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x416>
 8001cf0:	e054      	b.n	8001d9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf2:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <HAL_RCC_OscConfig+0x478>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf8:	f7ff fb00 	bl	80012fc <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d00:	f7ff fafc 	bl	80012fc <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e045      	b.n	8001d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <HAL_RCC_OscConfig+0x470>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f0      	bne.n	8001d00 <HAL_RCC_OscConfig+0x444>
 8001d1e:	e03d      	b.n	8001d9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d107      	bne.n	8001d38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e038      	b.n	8001d9e <HAL_RCC_OscConfig+0x4e2>
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40007000 	.word	0x40007000
 8001d34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d38:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <HAL_RCC_OscConfig+0x4ec>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d028      	beq.n	8001d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d121      	bne.n	8001d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d11a      	bne.n	8001d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d68:	4013      	ands	r3, r2
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d111      	bne.n	8001d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7e:	085b      	lsrs	r3, r3, #1
 8001d80:	3b01      	subs	r3, #1
 8001d82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d107      	bne.n	8001d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d001      	beq.n	8001d9c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e000      	b.n	8001d9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40023800 	.word	0x40023800

08001dac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d101      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e0cc      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dc0:	4b68      	ldr	r3, [pc, #416]	; (8001f64 <HAL_RCC_ClockConfig+0x1b8>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d90c      	bls.n	8001de8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dce:	4b65      	ldr	r3, [pc, #404]	; (8001f64 <HAL_RCC_ClockConfig+0x1b8>)
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd6:	4b63      	ldr	r3, [pc, #396]	; (8001f64 <HAL_RCC_ClockConfig+0x1b8>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d001      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e0b8      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d020      	beq.n	8001e36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e00:	4b59      	ldr	r3, [pc, #356]	; (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	4a58      	ldr	r2, [pc, #352]	; (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0308 	and.w	r3, r3, #8
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d005      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e18:	4b53      	ldr	r3, [pc, #332]	; (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	4a52      	ldr	r2, [pc, #328]	; (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e24:	4b50      	ldr	r3, [pc, #320]	; (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	494d      	ldr	r1, [pc, #308]	; (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d044      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d107      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e4a:	4b47      	ldr	r3, [pc, #284]	; (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d119      	bne.n	8001e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e07f      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d003      	beq.n	8001e6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e66:	2b03      	cmp	r3, #3
 8001e68:	d107      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e6a:	4b3f      	ldr	r3, [pc, #252]	; (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d109      	bne.n	8001e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e06f      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e7a:	4b3b      	ldr	r3, [pc, #236]	; (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e067      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e8a:	4b37      	ldr	r3, [pc, #220]	; (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f023 0203 	bic.w	r2, r3, #3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	4934      	ldr	r1, [pc, #208]	; (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e9c:	f7ff fa2e 	bl	80012fc <HAL_GetTick>
 8001ea0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea2:	e00a      	b.n	8001eba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea4:	f7ff fa2a 	bl	80012fc <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e04f      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eba:	4b2b      	ldr	r3, [pc, #172]	; (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 020c 	and.w	r2, r3, #12
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d1eb      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ecc:	4b25      	ldr	r3, [pc, #148]	; (8001f64 <HAL_RCC_ClockConfig+0x1b8>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d20c      	bcs.n	8001ef4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eda:	4b22      	ldr	r3, [pc, #136]	; (8001f64 <HAL_RCC_ClockConfig+0x1b8>)
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee2:	4b20      	ldr	r3, [pc, #128]	; (8001f64 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d001      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e032      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d008      	beq.n	8001f12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f00:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	4916      	ldr	r1, [pc, #88]	; (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d009      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f1e:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	490e      	ldr	r1, [pc, #56]	; (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f32:	f000 f821 	bl	8001f78 <HAL_RCC_GetSysClockFreq>
 8001f36:	4602      	mov	r2, r0
 8001f38:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	091b      	lsrs	r3, r3, #4
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	490a      	ldr	r1, [pc, #40]	; (8001f6c <HAL_RCC_ClockConfig+0x1c0>)
 8001f44:	5ccb      	ldrb	r3, [r1, r3]
 8001f46:	fa22 f303 	lsr.w	r3, r2, r3
 8001f4a:	4a09      	ldr	r2, [pc, #36]	; (8001f70 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f4e:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <HAL_RCC_ClockConfig+0x1c8>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff f98e 	bl	8001274 <HAL_InitTick>

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40023c00 	.word	0x40023c00
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	08004134 	.word	0x08004134
 8001f70:	20000040 	.word	0x20000040
 8001f74:	20000044 	.word	0x20000044

08001f78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f7c:	b094      	sub	sp, #80	; 0x50
 8001f7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f80:	2300      	movs	r3, #0
 8001f82:	647b      	str	r3, [r7, #68]	; 0x44
 8001f84:	2300      	movs	r3, #0
 8001f86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f88:	2300      	movs	r3, #0
 8001f8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f90:	4b79      	ldr	r3, [pc, #484]	; (8002178 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 030c 	and.w	r3, r3, #12
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	d00d      	beq.n	8001fb8 <HAL_RCC_GetSysClockFreq+0x40>
 8001f9c:	2b08      	cmp	r3, #8
 8001f9e:	f200 80e1 	bhi.w	8002164 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d002      	beq.n	8001fac <HAL_RCC_GetSysClockFreq+0x34>
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	d003      	beq.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001faa:	e0db      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fac:	4b73      	ldr	r3, [pc, #460]	; (800217c <HAL_RCC_GetSysClockFreq+0x204>)
 8001fae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001fb0:	e0db      	b.n	800216a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fb2:	4b73      	ldr	r3, [pc, #460]	; (8002180 <HAL_RCC_GetSysClockFreq+0x208>)
 8001fb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fb6:	e0d8      	b.n	800216a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fb8:	4b6f      	ldr	r3, [pc, #444]	; (8002178 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fc0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fc2:	4b6d      	ldr	r3, [pc, #436]	; (8002178 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d063      	beq.n	8002096 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fce:	4b6a      	ldr	r3, [pc, #424]	; (8002178 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	099b      	lsrs	r3, r3, #6
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fd8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fe0:	633b      	str	r3, [r7, #48]	; 0x30
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	637b      	str	r3, [r7, #52]	; 0x34
 8001fe6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001fea:	4622      	mov	r2, r4
 8001fec:	462b      	mov	r3, r5
 8001fee:	f04f 0000 	mov.w	r0, #0
 8001ff2:	f04f 0100 	mov.w	r1, #0
 8001ff6:	0159      	lsls	r1, r3, #5
 8001ff8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ffc:	0150      	lsls	r0, r2, #5
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4621      	mov	r1, r4
 8002004:	1a51      	subs	r1, r2, r1
 8002006:	6139      	str	r1, [r7, #16]
 8002008:	4629      	mov	r1, r5
 800200a:	eb63 0301 	sbc.w	r3, r3, r1
 800200e:	617b      	str	r3, [r7, #20]
 8002010:	f04f 0200 	mov.w	r2, #0
 8002014:	f04f 0300 	mov.w	r3, #0
 8002018:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800201c:	4659      	mov	r1, fp
 800201e:	018b      	lsls	r3, r1, #6
 8002020:	4651      	mov	r1, sl
 8002022:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002026:	4651      	mov	r1, sl
 8002028:	018a      	lsls	r2, r1, #6
 800202a:	4651      	mov	r1, sl
 800202c:	ebb2 0801 	subs.w	r8, r2, r1
 8002030:	4659      	mov	r1, fp
 8002032:	eb63 0901 	sbc.w	r9, r3, r1
 8002036:	f04f 0200 	mov.w	r2, #0
 800203a:	f04f 0300 	mov.w	r3, #0
 800203e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002042:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002046:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800204a:	4690      	mov	r8, r2
 800204c:	4699      	mov	r9, r3
 800204e:	4623      	mov	r3, r4
 8002050:	eb18 0303 	adds.w	r3, r8, r3
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	462b      	mov	r3, r5
 8002058:	eb49 0303 	adc.w	r3, r9, r3
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	f04f 0300 	mov.w	r3, #0
 8002066:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800206a:	4629      	mov	r1, r5
 800206c:	024b      	lsls	r3, r1, #9
 800206e:	4621      	mov	r1, r4
 8002070:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002074:	4621      	mov	r1, r4
 8002076:	024a      	lsls	r2, r1, #9
 8002078:	4610      	mov	r0, r2
 800207a:	4619      	mov	r1, r3
 800207c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800207e:	2200      	movs	r2, #0
 8002080:	62bb      	str	r3, [r7, #40]	; 0x28
 8002082:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002084:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002088:	f7fe f902 	bl	8000290 <__aeabi_uldivmod>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	4613      	mov	r3, r2
 8002092:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002094:	e058      	b.n	8002148 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002096:	4b38      	ldr	r3, [pc, #224]	; (8002178 <HAL_RCC_GetSysClockFreq+0x200>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	099b      	lsrs	r3, r3, #6
 800209c:	2200      	movs	r2, #0
 800209e:	4618      	mov	r0, r3
 80020a0:	4611      	mov	r1, r2
 80020a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80020a6:	623b      	str	r3, [r7, #32]
 80020a8:	2300      	movs	r3, #0
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24
 80020ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80020b0:	4642      	mov	r2, r8
 80020b2:	464b      	mov	r3, r9
 80020b4:	f04f 0000 	mov.w	r0, #0
 80020b8:	f04f 0100 	mov.w	r1, #0
 80020bc:	0159      	lsls	r1, r3, #5
 80020be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020c2:	0150      	lsls	r0, r2, #5
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4641      	mov	r1, r8
 80020ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80020ce:	4649      	mov	r1, r9
 80020d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	f04f 0300 	mov.w	r3, #0
 80020dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80020e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80020e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80020e8:	ebb2 040a 	subs.w	r4, r2, sl
 80020ec:	eb63 050b 	sbc.w	r5, r3, fp
 80020f0:	f04f 0200 	mov.w	r2, #0
 80020f4:	f04f 0300 	mov.w	r3, #0
 80020f8:	00eb      	lsls	r3, r5, #3
 80020fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020fe:	00e2      	lsls	r2, r4, #3
 8002100:	4614      	mov	r4, r2
 8002102:	461d      	mov	r5, r3
 8002104:	4643      	mov	r3, r8
 8002106:	18e3      	adds	r3, r4, r3
 8002108:	603b      	str	r3, [r7, #0]
 800210a:	464b      	mov	r3, r9
 800210c:	eb45 0303 	adc.w	r3, r5, r3
 8002110:	607b      	str	r3, [r7, #4]
 8002112:	f04f 0200 	mov.w	r2, #0
 8002116:	f04f 0300 	mov.w	r3, #0
 800211a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800211e:	4629      	mov	r1, r5
 8002120:	028b      	lsls	r3, r1, #10
 8002122:	4621      	mov	r1, r4
 8002124:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002128:	4621      	mov	r1, r4
 800212a:	028a      	lsls	r2, r1, #10
 800212c:	4610      	mov	r0, r2
 800212e:	4619      	mov	r1, r3
 8002130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002132:	2200      	movs	r2, #0
 8002134:	61bb      	str	r3, [r7, #24]
 8002136:	61fa      	str	r2, [r7, #28]
 8002138:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800213c:	f7fe f8a8 	bl	8000290 <__aeabi_uldivmod>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	4613      	mov	r3, r2
 8002146:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002148:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <HAL_RCC_GetSysClockFreq+0x200>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	0c1b      	lsrs	r3, r3, #16
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	3301      	adds	r3, #1
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002158:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800215a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800215c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002160:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002162:	e002      	b.n	800216a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002164:	4b05      	ldr	r3, [pc, #20]	; (800217c <HAL_RCC_GetSysClockFreq+0x204>)
 8002166:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002168:	bf00      	nop
    }
  }
  return sysclockfreq;
 800216a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800216c:	4618      	mov	r0, r3
 800216e:	3750      	adds	r7, #80	; 0x50
 8002170:	46bd      	mov	sp, r7
 8002172:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002176:	bf00      	nop
 8002178:	40023800 	.word	0x40023800
 800217c:	00f42400 	.word	0x00f42400
 8002180:	007a1200 	.word	0x007a1200

08002184 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e041      	b.n	800221a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d106      	bne.n	80021b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7fe fefc 	bl	8000fa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2202      	movs	r2, #2
 80021b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3304      	adds	r3, #4
 80021c0:	4619      	mov	r1, r3
 80021c2:	4610      	mov	r0, r2
 80021c4:	f000 fe44 	bl	8002e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e041      	b.n	80022b8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	d106      	bne.n	800224e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f839 	bl	80022c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2202      	movs	r2, #2
 8002252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3304      	adds	r3, #4
 800225e:	4619      	mov	r1, r3
 8002260:	4610      	mov	r0, r2
 8002262:	f000 fdf5 	bl	8002e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d109      	bne.n	80022f8 <HAL_TIM_PWM_Start+0x24>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	bf14      	ite	ne
 80022f0:	2301      	movne	r3, #1
 80022f2:	2300      	moveq	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	e022      	b.n	800233e <HAL_TIM_PWM_Start+0x6a>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	d109      	bne.n	8002312 <HAL_TIM_PWM_Start+0x3e>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b01      	cmp	r3, #1
 8002308:	bf14      	ite	ne
 800230a:	2301      	movne	r3, #1
 800230c:	2300      	moveq	r3, #0
 800230e:	b2db      	uxtb	r3, r3
 8002310:	e015      	b.n	800233e <HAL_TIM_PWM_Start+0x6a>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	2b08      	cmp	r3, #8
 8002316:	d109      	bne.n	800232c <HAL_TIM_PWM_Start+0x58>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b01      	cmp	r3, #1
 8002322:	bf14      	ite	ne
 8002324:	2301      	movne	r3, #1
 8002326:	2300      	moveq	r3, #0
 8002328:	b2db      	uxtb	r3, r3
 800232a:	e008      	b.n	800233e <HAL_TIM_PWM_Start+0x6a>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b01      	cmp	r3, #1
 8002336:	bf14      	ite	ne
 8002338:	2301      	movne	r3, #1
 800233a:	2300      	moveq	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e068      	b.n	8002418 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d104      	bne.n	8002356 <HAL_TIM_PWM_Start+0x82>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2202      	movs	r2, #2
 8002350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002354:	e013      	b.n	800237e <HAL_TIM_PWM_Start+0xaa>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	2b04      	cmp	r3, #4
 800235a:	d104      	bne.n	8002366 <HAL_TIM_PWM_Start+0x92>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2202      	movs	r2, #2
 8002360:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002364:	e00b      	b.n	800237e <HAL_TIM_PWM_Start+0xaa>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	2b08      	cmp	r3, #8
 800236a:	d104      	bne.n	8002376 <HAL_TIM_PWM_Start+0xa2>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2202      	movs	r2, #2
 8002370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002374:	e003      	b.n	800237e <HAL_TIM_PWM_Start+0xaa>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2202      	movs	r2, #2
 800237a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2201      	movs	r2, #1
 8002384:	6839      	ldr	r1, [r7, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f001 f926 	bl	80035d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a23      	ldr	r2, [pc, #140]	; (8002420 <HAL_TIM_PWM_Start+0x14c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d107      	bne.n	80023a6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a1d      	ldr	r2, [pc, #116]	; (8002420 <HAL_TIM_PWM_Start+0x14c>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d018      	beq.n	80023e2 <HAL_TIM_PWM_Start+0x10e>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023b8:	d013      	beq.n	80023e2 <HAL_TIM_PWM_Start+0x10e>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a19      	ldr	r2, [pc, #100]	; (8002424 <HAL_TIM_PWM_Start+0x150>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d00e      	beq.n	80023e2 <HAL_TIM_PWM_Start+0x10e>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a17      	ldr	r2, [pc, #92]	; (8002428 <HAL_TIM_PWM_Start+0x154>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d009      	beq.n	80023e2 <HAL_TIM_PWM_Start+0x10e>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a16      	ldr	r2, [pc, #88]	; (800242c <HAL_TIM_PWM_Start+0x158>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d004      	beq.n	80023e2 <HAL_TIM_PWM_Start+0x10e>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a14      	ldr	r2, [pc, #80]	; (8002430 <HAL_TIM_PWM_Start+0x15c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d111      	bne.n	8002406 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2b06      	cmp	r3, #6
 80023f2:	d010      	beq.n	8002416 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 0201 	orr.w	r2, r2, #1
 8002402:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002404:	e007      	b.n	8002416 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f042 0201 	orr.w	r2, r2, #1
 8002414:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40010000 	.word	0x40010000
 8002424:	40000400 	.word	0x40000400
 8002428:	40000800 	.word	0x40000800
 800242c:	40000c00 	.word	0x40000c00
 8002430:	40014000 	.word	0x40014000

08002434 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e041      	b.n	80024ca <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d106      	bne.n	8002460 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f839 	bl	80024d2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2202      	movs	r2, #2
 8002464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3304      	adds	r3, #4
 8002470:	4619      	mov	r1, r3
 8002472:	4610      	mov	r0, r2
 8002474:	f000 fcec 	bl	8002e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
	...

080024e8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024f2:	2300      	movs	r3, #0
 80024f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d104      	bne.n	8002506 <HAL_TIM_IC_Start_IT+0x1e>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002502:	b2db      	uxtb	r3, r3
 8002504:	e013      	b.n	800252e <HAL_TIM_IC_Start_IT+0x46>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	2b04      	cmp	r3, #4
 800250a:	d104      	bne.n	8002516 <HAL_TIM_IC_Start_IT+0x2e>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002512:	b2db      	uxtb	r3, r3
 8002514:	e00b      	b.n	800252e <HAL_TIM_IC_Start_IT+0x46>
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	2b08      	cmp	r3, #8
 800251a:	d104      	bne.n	8002526 <HAL_TIM_IC_Start_IT+0x3e>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002522:	b2db      	uxtb	r3, r3
 8002524:	e003      	b.n	800252e <HAL_TIM_IC_Start_IT+0x46>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800252c:	b2db      	uxtb	r3, r3
 800252e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d104      	bne.n	8002540 <HAL_TIM_IC_Start_IT+0x58>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800253c:	b2db      	uxtb	r3, r3
 800253e:	e013      	b.n	8002568 <HAL_TIM_IC_Start_IT+0x80>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	2b04      	cmp	r3, #4
 8002544:	d104      	bne.n	8002550 <HAL_TIM_IC_Start_IT+0x68>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800254c:	b2db      	uxtb	r3, r3
 800254e:	e00b      	b.n	8002568 <HAL_TIM_IC_Start_IT+0x80>
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	2b08      	cmp	r3, #8
 8002554:	d104      	bne.n	8002560 <HAL_TIM_IC_Start_IT+0x78>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800255c:	b2db      	uxtb	r3, r3
 800255e:	e003      	b.n	8002568 <HAL_TIM_IC_Start_IT+0x80>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002566:	b2db      	uxtb	r3, r3
 8002568:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800256a:	7bbb      	ldrb	r3, [r7, #14]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d102      	bne.n	8002576 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002570:	7b7b      	ldrb	r3, [r7, #13]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d001      	beq.n	800257a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e0c2      	b.n	8002700 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d104      	bne.n	800258a <HAL_TIM_IC_Start_IT+0xa2>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2202      	movs	r2, #2
 8002584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002588:	e013      	b.n	80025b2 <HAL_TIM_IC_Start_IT+0xca>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	2b04      	cmp	r3, #4
 800258e:	d104      	bne.n	800259a <HAL_TIM_IC_Start_IT+0xb2>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2202      	movs	r2, #2
 8002594:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002598:	e00b      	b.n	80025b2 <HAL_TIM_IC_Start_IT+0xca>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	2b08      	cmp	r3, #8
 800259e:	d104      	bne.n	80025aa <HAL_TIM_IC_Start_IT+0xc2>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2202      	movs	r2, #2
 80025a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025a8:	e003      	b.n	80025b2 <HAL_TIM_IC_Start_IT+0xca>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2202      	movs	r2, #2
 80025ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d104      	bne.n	80025c2 <HAL_TIM_IC_Start_IT+0xda>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2202      	movs	r2, #2
 80025bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025c0:	e013      	b.n	80025ea <HAL_TIM_IC_Start_IT+0x102>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d104      	bne.n	80025d2 <HAL_TIM_IC_Start_IT+0xea>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2202      	movs	r2, #2
 80025cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025d0:	e00b      	b.n	80025ea <HAL_TIM_IC_Start_IT+0x102>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	d104      	bne.n	80025e2 <HAL_TIM_IC_Start_IT+0xfa>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2202      	movs	r2, #2
 80025dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025e0:	e003      	b.n	80025ea <HAL_TIM_IC_Start_IT+0x102>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2202      	movs	r2, #2
 80025e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	2b0c      	cmp	r3, #12
 80025ee:	d841      	bhi.n	8002674 <HAL_TIM_IC_Start_IT+0x18c>
 80025f0:	a201      	add	r2, pc, #4	; (adr r2, 80025f8 <HAL_TIM_IC_Start_IT+0x110>)
 80025f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f6:	bf00      	nop
 80025f8:	0800262d 	.word	0x0800262d
 80025fc:	08002675 	.word	0x08002675
 8002600:	08002675 	.word	0x08002675
 8002604:	08002675 	.word	0x08002675
 8002608:	0800263f 	.word	0x0800263f
 800260c:	08002675 	.word	0x08002675
 8002610:	08002675 	.word	0x08002675
 8002614:	08002675 	.word	0x08002675
 8002618:	08002651 	.word	0x08002651
 800261c:	08002675 	.word	0x08002675
 8002620:	08002675 	.word	0x08002675
 8002624:	08002675 	.word	0x08002675
 8002628:	08002663 	.word	0x08002663
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0202 	orr.w	r2, r2, #2
 800263a:	60da      	str	r2, [r3, #12]
      break;
 800263c:	e01d      	b.n	800267a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68da      	ldr	r2, [r3, #12]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f042 0204 	orr.w	r2, r2, #4
 800264c:	60da      	str	r2, [r3, #12]
      break;
 800264e:	e014      	b.n	800267a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68da      	ldr	r2, [r3, #12]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0208 	orr.w	r2, r2, #8
 800265e:	60da      	str	r2, [r3, #12]
      break;
 8002660:	e00b      	b.n	800267a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f042 0210 	orr.w	r2, r2, #16
 8002670:	60da      	str	r2, [r3, #12]
      break;
 8002672:	e002      	b.n	800267a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	73fb      	strb	r3, [r7, #15]
      break;
 8002678:	bf00      	nop
  }

  if (status == HAL_OK)
 800267a:	7bfb      	ldrb	r3, [r7, #15]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d13e      	bne.n	80026fe <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2201      	movs	r2, #1
 8002686:	6839      	ldr	r1, [r7, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f000 ffa5 	bl	80035d8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a1d      	ldr	r2, [pc, #116]	; (8002708 <HAL_TIM_IC_Start_IT+0x220>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d018      	beq.n	80026ca <HAL_TIM_IC_Start_IT+0x1e2>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a0:	d013      	beq.n	80026ca <HAL_TIM_IC_Start_IT+0x1e2>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a19      	ldr	r2, [pc, #100]	; (800270c <HAL_TIM_IC_Start_IT+0x224>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d00e      	beq.n	80026ca <HAL_TIM_IC_Start_IT+0x1e2>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a17      	ldr	r2, [pc, #92]	; (8002710 <HAL_TIM_IC_Start_IT+0x228>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d009      	beq.n	80026ca <HAL_TIM_IC_Start_IT+0x1e2>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a16      	ldr	r2, [pc, #88]	; (8002714 <HAL_TIM_IC_Start_IT+0x22c>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d004      	beq.n	80026ca <HAL_TIM_IC_Start_IT+0x1e2>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a14      	ldr	r2, [pc, #80]	; (8002718 <HAL_TIM_IC_Start_IT+0x230>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d111      	bne.n	80026ee <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	2b06      	cmp	r3, #6
 80026da:	d010      	beq.n	80026fe <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f042 0201 	orr.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ec:	e007      	b.n	80026fe <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f042 0201 	orr.w	r2, r2, #1
 80026fc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40010000 	.word	0x40010000
 800270c:	40000400 	.word	0x40000400
 8002710:	40000800 	.word	0x40000800
 8002714:	40000c00 	.word	0x40000c00
 8002718:	40014000 	.word	0x40014000

0800271c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b02      	cmp	r3, #2
 8002730:	d122      	bne.n	8002778 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b02      	cmp	r3, #2
 800273e:	d11b      	bne.n	8002778 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f06f 0202 	mvn.w	r2, #2
 8002748:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7fe f886 	bl	8000870 <HAL_TIM_IC_CaptureCallback>
 8002764:	e005      	b.n	8002772 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 fb54 	bl	8002e14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 fb5b 	bl	8002e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	f003 0304 	and.w	r3, r3, #4
 8002782:	2b04      	cmp	r3, #4
 8002784:	d122      	bne.n	80027cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b04      	cmp	r3, #4
 8002792:	d11b      	bne.n	80027cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f06f 0204 	mvn.w	r2, #4
 800279c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2202      	movs	r2, #2
 80027a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7fe f85c 	bl	8000870 <HAL_TIM_IC_CaptureCallback>
 80027b8:	e005      	b.n	80027c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 fb2a 	bl	8002e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 fb31 	bl	8002e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	2b08      	cmp	r3, #8
 80027d8:	d122      	bne.n	8002820 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f003 0308 	and.w	r3, r3, #8
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	d11b      	bne.n	8002820 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f06f 0208 	mvn.w	r2, #8
 80027f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2204      	movs	r2, #4
 80027f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7fe f832 	bl	8000870 <HAL_TIM_IC_CaptureCallback>
 800280c:	e005      	b.n	800281a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 fb00 	bl	8002e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 fb07 	bl	8002e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	f003 0310 	and.w	r3, r3, #16
 800282a:	2b10      	cmp	r3, #16
 800282c:	d122      	bne.n	8002874 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f003 0310 	and.w	r3, r3, #16
 8002838:	2b10      	cmp	r3, #16
 800283a:	d11b      	bne.n	8002874 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f06f 0210 	mvn.w	r2, #16
 8002844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2208      	movs	r2, #8
 800284a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7fe f808 	bl	8000870 <HAL_TIM_IC_CaptureCallback>
 8002860:	e005      	b.n	800286e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 fad6 	bl	8002e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 fadd 	bl	8002e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b01      	cmp	r3, #1
 8002880:	d10e      	bne.n	80028a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b01      	cmp	r3, #1
 800288e:	d107      	bne.n	80028a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f06f 0201 	mvn.w	r2, #1
 8002898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 fab0 	bl	8002e00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028aa:	2b80      	cmp	r3, #128	; 0x80
 80028ac:	d10e      	bne.n	80028cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b8:	2b80      	cmp	r3, #128	; 0x80
 80028ba:	d107      	bne.n	80028cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 ff76 	bl	80037b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d6:	2b40      	cmp	r3, #64	; 0x40
 80028d8:	d10e      	bne.n	80028f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e4:	2b40      	cmp	r3, #64	; 0x40
 80028e6:	d107      	bne.n	80028f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 faa2 	bl	8002e3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	f003 0320 	and.w	r3, r3, #32
 8002902:	2b20      	cmp	r3, #32
 8002904:	d10e      	bne.n	8002924 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	f003 0320 	and.w	r3, r3, #32
 8002910:	2b20      	cmp	r3, #32
 8002912:	d107      	bne.n	8002924 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f06f 0220 	mvn.w	r2, #32
 800291c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 ff40 	bl	80037a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002924:	bf00      	nop
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002938:	2300      	movs	r3, #0
 800293a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002942:	2b01      	cmp	r3, #1
 8002944:	d101      	bne.n	800294a <HAL_TIM_IC_ConfigChannel+0x1e>
 8002946:	2302      	movs	r3, #2
 8002948:	e088      	b.n	8002a5c <HAL_TIM_IC_ConfigChannel+0x130>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d11b      	bne.n	8002990 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6818      	ldr	r0, [r3, #0]
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	6819      	ldr	r1, [r3, #0]
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	f000 fc7e 	bl	8003268 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	699a      	ldr	r2, [r3, #24]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 020c 	bic.w	r2, r2, #12
 800297a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6999      	ldr	r1, [r3, #24]
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	619a      	str	r2, [r3, #24]
 800298e:	e060      	b.n	8002a52 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b04      	cmp	r3, #4
 8002994:	d11c      	bne.n	80029d0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	6819      	ldr	r1, [r3, #0]
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	f000 fcf6 	bl	8003396 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	699a      	ldr	r2, [r3, #24]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80029b8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6999      	ldr	r1, [r3, #24]
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	021a      	lsls	r2, r3, #8
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	619a      	str	r2, [r3, #24]
 80029ce:	e040      	b.n	8002a52 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d11b      	bne.n	8002a0e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6818      	ldr	r0, [r3, #0]
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	6819      	ldr	r1, [r3, #0]
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	f000 fd43 	bl	8003470 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	69da      	ldr	r2, [r3, #28]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 020c 	bic.w	r2, r2, #12
 80029f8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	69d9      	ldr	r1, [r3, #28]
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	61da      	str	r2, [r3, #28]
 8002a0c:	e021      	b.n	8002a52 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b0c      	cmp	r3, #12
 8002a12:	d11c      	bne.n	8002a4e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6818      	ldr	r0, [r3, #0]
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	6819      	ldr	r1, [r3, #0]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f000 fd60 	bl	80034e8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	69da      	ldr	r2, [r3, #28]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002a36:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	69d9      	ldr	r1, [r3, #28]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	021a      	lsls	r2, r3, #8
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	61da      	str	r2, [r3, #28]
 8002a4c:	e001      	b.n	8002a52 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3718      	adds	r7, #24
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a70:	2300      	movs	r3, #0
 8002a72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d101      	bne.n	8002a82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	e0ae      	b.n	8002be0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b0c      	cmp	r3, #12
 8002a8e:	f200 809f 	bhi.w	8002bd0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002a92:	a201      	add	r2, pc, #4	; (adr r2, 8002a98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a98:	08002acd 	.word	0x08002acd
 8002a9c:	08002bd1 	.word	0x08002bd1
 8002aa0:	08002bd1 	.word	0x08002bd1
 8002aa4:	08002bd1 	.word	0x08002bd1
 8002aa8:	08002b0d 	.word	0x08002b0d
 8002aac:	08002bd1 	.word	0x08002bd1
 8002ab0:	08002bd1 	.word	0x08002bd1
 8002ab4:	08002bd1 	.word	0x08002bd1
 8002ab8:	08002b4f 	.word	0x08002b4f
 8002abc:	08002bd1 	.word	0x08002bd1
 8002ac0:	08002bd1 	.word	0x08002bd1
 8002ac4:	08002bd1 	.word	0x08002bd1
 8002ac8:	08002b8f 	.word	0x08002b8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68b9      	ldr	r1, [r7, #8]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 fa3c 	bl	8002f50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	699a      	ldr	r2, [r3, #24]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f042 0208 	orr.w	r2, r2, #8
 8002ae6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	699a      	ldr	r2, [r3, #24]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0204 	bic.w	r2, r2, #4
 8002af6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6999      	ldr	r1, [r3, #24]
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	691a      	ldr	r2, [r3, #16]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	619a      	str	r2, [r3, #24]
      break;
 8002b0a:	e064      	b.n	8002bd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68b9      	ldr	r1, [r7, #8]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 fa82 	bl	800301c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699a      	ldr	r2, [r3, #24]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	699a      	ldr	r2, [r3, #24]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6999      	ldr	r1, [r3, #24]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	021a      	lsls	r2, r3, #8
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	619a      	str	r2, [r3, #24]
      break;
 8002b4c:	e043      	b.n	8002bd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68b9      	ldr	r1, [r7, #8]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f000 facd 	bl	80030f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	69da      	ldr	r2, [r3, #28]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f042 0208 	orr.w	r2, r2, #8
 8002b68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	69da      	ldr	r2, [r3, #28]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0204 	bic.w	r2, r2, #4
 8002b78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	69d9      	ldr	r1, [r3, #28]
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	691a      	ldr	r2, [r3, #16]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	61da      	str	r2, [r3, #28]
      break;
 8002b8c:	e023      	b.n	8002bd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68b9      	ldr	r1, [r7, #8]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f000 fb17 	bl	80031c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	69da      	ldr	r2, [r3, #28]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ba8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	69da      	ldr	r2, [r3, #28]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	69d9      	ldr	r1, [r3, #28]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	021a      	lsls	r2, r3, #8
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	61da      	str	r2, [r3, #28]
      break;
 8002bce:	e002      	b.n	8002bd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	75fb      	strb	r3, [r7, #23]
      break;
 8002bd4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_TIM_ConfigClockSource+0x1c>
 8002c00:	2302      	movs	r3, #2
 8002c02:	e0b4      	b.n	8002d6e <HAL_TIM_ConfigClockSource+0x186>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c3c:	d03e      	beq.n	8002cbc <HAL_TIM_ConfigClockSource+0xd4>
 8002c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c42:	f200 8087 	bhi.w	8002d54 <HAL_TIM_ConfigClockSource+0x16c>
 8002c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c4a:	f000 8086 	beq.w	8002d5a <HAL_TIM_ConfigClockSource+0x172>
 8002c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c52:	d87f      	bhi.n	8002d54 <HAL_TIM_ConfigClockSource+0x16c>
 8002c54:	2b70      	cmp	r3, #112	; 0x70
 8002c56:	d01a      	beq.n	8002c8e <HAL_TIM_ConfigClockSource+0xa6>
 8002c58:	2b70      	cmp	r3, #112	; 0x70
 8002c5a:	d87b      	bhi.n	8002d54 <HAL_TIM_ConfigClockSource+0x16c>
 8002c5c:	2b60      	cmp	r3, #96	; 0x60
 8002c5e:	d050      	beq.n	8002d02 <HAL_TIM_ConfigClockSource+0x11a>
 8002c60:	2b60      	cmp	r3, #96	; 0x60
 8002c62:	d877      	bhi.n	8002d54 <HAL_TIM_ConfigClockSource+0x16c>
 8002c64:	2b50      	cmp	r3, #80	; 0x50
 8002c66:	d03c      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0xfa>
 8002c68:	2b50      	cmp	r3, #80	; 0x50
 8002c6a:	d873      	bhi.n	8002d54 <HAL_TIM_ConfigClockSource+0x16c>
 8002c6c:	2b40      	cmp	r3, #64	; 0x40
 8002c6e:	d058      	beq.n	8002d22 <HAL_TIM_ConfigClockSource+0x13a>
 8002c70:	2b40      	cmp	r3, #64	; 0x40
 8002c72:	d86f      	bhi.n	8002d54 <HAL_TIM_ConfigClockSource+0x16c>
 8002c74:	2b30      	cmp	r3, #48	; 0x30
 8002c76:	d064      	beq.n	8002d42 <HAL_TIM_ConfigClockSource+0x15a>
 8002c78:	2b30      	cmp	r3, #48	; 0x30
 8002c7a:	d86b      	bhi.n	8002d54 <HAL_TIM_ConfigClockSource+0x16c>
 8002c7c:	2b20      	cmp	r3, #32
 8002c7e:	d060      	beq.n	8002d42 <HAL_TIM_ConfigClockSource+0x15a>
 8002c80:	2b20      	cmp	r3, #32
 8002c82:	d867      	bhi.n	8002d54 <HAL_TIM_ConfigClockSource+0x16c>
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d05c      	beq.n	8002d42 <HAL_TIM_ConfigClockSource+0x15a>
 8002c88:	2b10      	cmp	r3, #16
 8002c8a:	d05a      	beq.n	8002d42 <HAL_TIM_ConfigClockSource+0x15a>
 8002c8c:	e062      	b.n	8002d54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6818      	ldr	r0, [r3, #0]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	6899      	ldr	r1, [r3, #8]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	f000 fc7b 	bl	8003598 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	609a      	str	r2, [r3, #8]
      break;
 8002cba:	e04f      	b.n	8002d5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6818      	ldr	r0, [r3, #0]
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	6899      	ldr	r1, [r3, #8]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	f000 fc64 	bl	8003598 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cde:	609a      	str	r2, [r3, #8]
      break;
 8002ce0:	e03c      	b.n	8002d5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6818      	ldr	r0, [r3, #0]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	6859      	ldr	r1, [r3, #4]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	f000 fb22 	bl	8003338 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2150      	movs	r1, #80	; 0x50
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 fc31 	bl	8003562 <TIM_ITRx_SetConfig>
      break;
 8002d00:	e02c      	b.n	8002d5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6818      	ldr	r0, [r3, #0]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	6859      	ldr	r1, [r3, #4]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	f000 fb7e 	bl	8003410 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2160      	movs	r1, #96	; 0x60
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 fc21 	bl	8003562 <TIM_ITRx_SetConfig>
      break;
 8002d20:	e01c      	b.n	8002d5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6818      	ldr	r0, [r3, #0]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	6859      	ldr	r1, [r3, #4]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	f000 fb02 	bl	8003338 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2140      	movs	r1, #64	; 0x40
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 fc11 	bl	8003562 <TIM_ITRx_SetConfig>
      break;
 8002d40:	e00c      	b.n	8002d5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4610      	mov	r0, r2
 8002d4e:	f000 fc08 	bl	8003562 <TIM_ITRx_SetConfig>
      break;
 8002d52:	e003      	b.n	8002d5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	73fb      	strb	r3, [r7, #15]
      break;
 8002d58:	e000      	b.n	8002d5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
	...

08002d78 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002d82:	2300      	movs	r3, #0
 8002d84:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b0c      	cmp	r3, #12
 8002d8a:	d831      	bhi.n	8002df0 <HAL_TIM_ReadCapturedValue+0x78>
 8002d8c:	a201      	add	r2, pc, #4	; (adr r2, 8002d94 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d92:	bf00      	nop
 8002d94:	08002dc9 	.word	0x08002dc9
 8002d98:	08002df1 	.word	0x08002df1
 8002d9c:	08002df1 	.word	0x08002df1
 8002da0:	08002df1 	.word	0x08002df1
 8002da4:	08002dd3 	.word	0x08002dd3
 8002da8:	08002df1 	.word	0x08002df1
 8002dac:	08002df1 	.word	0x08002df1
 8002db0:	08002df1 	.word	0x08002df1
 8002db4:	08002ddd 	.word	0x08002ddd
 8002db8:	08002df1 	.word	0x08002df1
 8002dbc:	08002df1 	.word	0x08002df1
 8002dc0:	08002df1 	.word	0x08002df1
 8002dc4:	08002de7 	.word	0x08002de7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dce:	60fb      	str	r3, [r7, #12]

      break;
 8002dd0:	e00f      	b.n	8002df2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd8:	60fb      	str	r3, [r7, #12]

      break;
 8002dda:	e00a      	b.n	8002df2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de2:	60fb      	str	r3, [r7, #12]

      break;
 8002de4:	e005      	b.n	8002df2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	60fb      	str	r3, [r7, #12]

      break;
 8002dee:	e000      	b.n	8002df2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002df0:	bf00      	nop
  }

  return tmpreg;
 8002df2:	68fb      	ldr	r3, [r7, #12]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a34      	ldr	r2, [pc, #208]	; (8002f34 <TIM_Base_SetConfig+0xe4>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d00f      	beq.n	8002e88 <TIM_Base_SetConfig+0x38>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e6e:	d00b      	beq.n	8002e88 <TIM_Base_SetConfig+0x38>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a31      	ldr	r2, [pc, #196]	; (8002f38 <TIM_Base_SetConfig+0xe8>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d007      	beq.n	8002e88 <TIM_Base_SetConfig+0x38>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a30      	ldr	r2, [pc, #192]	; (8002f3c <TIM_Base_SetConfig+0xec>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d003      	beq.n	8002e88 <TIM_Base_SetConfig+0x38>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a2f      	ldr	r2, [pc, #188]	; (8002f40 <TIM_Base_SetConfig+0xf0>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d108      	bne.n	8002e9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a25      	ldr	r2, [pc, #148]	; (8002f34 <TIM_Base_SetConfig+0xe4>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d01b      	beq.n	8002eda <TIM_Base_SetConfig+0x8a>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea8:	d017      	beq.n	8002eda <TIM_Base_SetConfig+0x8a>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a22      	ldr	r2, [pc, #136]	; (8002f38 <TIM_Base_SetConfig+0xe8>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d013      	beq.n	8002eda <TIM_Base_SetConfig+0x8a>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a21      	ldr	r2, [pc, #132]	; (8002f3c <TIM_Base_SetConfig+0xec>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d00f      	beq.n	8002eda <TIM_Base_SetConfig+0x8a>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a20      	ldr	r2, [pc, #128]	; (8002f40 <TIM_Base_SetConfig+0xf0>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d00b      	beq.n	8002eda <TIM_Base_SetConfig+0x8a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a1f      	ldr	r2, [pc, #124]	; (8002f44 <TIM_Base_SetConfig+0xf4>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d007      	beq.n	8002eda <TIM_Base_SetConfig+0x8a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a1e      	ldr	r2, [pc, #120]	; (8002f48 <TIM_Base_SetConfig+0xf8>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d003      	beq.n	8002eda <TIM_Base_SetConfig+0x8a>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a1d      	ldr	r2, [pc, #116]	; (8002f4c <TIM_Base_SetConfig+0xfc>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d108      	bne.n	8002eec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ee0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a08      	ldr	r2, [pc, #32]	; (8002f34 <TIM_Base_SetConfig+0xe4>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d103      	bne.n	8002f20 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	691a      	ldr	r2, [r3, #16]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	615a      	str	r2, [r3, #20]
}
 8002f26:	bf00      	nop
 8002f28:	3714      	adds	r7, #20
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	40010000 	.word	0x40010000
 8002f38:	40000400 	.word	0x40000400
 8002f3c:	40000800 	.word	0x40000800
 8002f40:	40000c00 	.word	0x40000c00
 8002f44:	40014000 	.word	0x40014000
 8002f48:	40014400 	.word	0x40014400
 8002f4c:	40014800 	.word	0x40014800

08002f50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b087      	sub	sp, #28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	f023 0201 	bic.w	r2, r3, #1
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f023 0303 	bic.w	r3, r3, #3
 8002f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	f023 0302 	bic.w	r3, r3, #2
 8002f98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a1c      	ldr	r2, [pc, #112]	; (8003018 <TIM_OC1_SetConfig+0xc8>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d10c      	bne.n	8002fc6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	f023 0308 	bic.w	r3, r3, #8
 8002fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f023 0304 	bic.w	r3, r3, #4
 8002fc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a13      	ldr	r2, [pc, #76]	; (8003018 <TIM_OC1_SetConfig+0xc8>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d111      	bne.n	8002ff2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	621a      	str	r2, [r3, #32]
}
 800300c:	bf00      	nop
 800300e:	371c      	adds	r7, #28
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	40010000 	.word	0x40010000

0800301c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800301c:	b480      	push	{r7}
 800301e:	b087      	sub	sp, #28
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	f023 0210 	bic.w	r2, r3, #16
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800304a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003052:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	021b      	lsls	r3, r3, #8
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	4313      	orrs	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	f023 0320 	bic.w	r3, r3, #32
 8003066:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	011b      	lsls	r3, r3, #4
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	4313      	orrs	r3, r2
 8003072:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a1e      	ldr	r2, [pc, #120]	; (80030f0 <TIM_OC2_SetConfig+0xd4>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d10d      	bne.n	8003098 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003082:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	011b      	lsls	r3, r3, #4
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	4313      	orrs	r3, r2
 800308e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003096:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a15      	ldr	r2, [pc, #84]	; (80030f0 <TIM_OC2_SetConfig+0xd4>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d113      	bne.n	80030c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	621a      	str	r2, [r3, #32]
}
 80030e2:	bf00      	nop
 80030e4:	371c      	adds	r7, #28
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	40010000 	.word	0x40010000

080030f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b087      	sub	sp, #28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f023 0303 	bic.w	r3, r3, #3
 800312a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	4313      	orrs	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800313c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	021b      	lsls	r3, r3, #8
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	4313      	orrs	r3, r2
 8003148:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a1d      	ldr	r2, [pc, #116]	; (80031c4 <TIM_OC3_SetConfig+0xd0>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d10d      	bne.n	800316e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003158:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	021b      	lsls	r3, r3, #8
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	4313      	orrs	r3, r2
 8003164:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800316c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a14      	ldr	r2, [pc, #80]	; (80031c4 <TIM_OC3_SetConfig+0xd0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d113      	bne.n	800319e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800317c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003184:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	4313      	orrs	r3, r2
 8003190:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	4313      	orrs	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	621a      	str	r2, [r3, #32]
}
 80031b8:	bf00      	nop
 80031ba:	371c      	adds	r7, #28
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	40010000 	.word	0x40010000

080031c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b087      	sub	sp, #28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	021b      	lsls	r3, r3, #8
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4313      	orrs	r3, r2
 800320a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003212:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	031b      	lsls	r3, r3, #12
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a10      	ldr	r2, [pc, #64]	; (8003264 <TIM_OC4_SetConfig+0x9c>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d109      	bne.n	800323c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800322e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	019b      	lsls	r3, r3, #6
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	4313      	orrs	r3, r2
 800323a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	621a      	str	r2, [r3, #32]
}
 8003256:	bf00      	nop
 8003258:	371c      	adds	r7, #28
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	40010000 	.word	0x40010000

08003268 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003268:	b480      	push	{r7}
 800326a:	b087      	sub	sp, #28
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
 8003274:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	f023 0201 	bic.w	r2, r3, #1
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	4a24      	ldr	r2, [pc, #144]	; (8003324 <TIM_TI1_SetConfig+0xbc>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d013      	beq.n	80032be <TIM_TI1_SetConfig+0x56>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800329c:	d00f      	beq.n	80032be <TIM_TI1_SetConfig+0x56>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4a21      	ldr	r2, [pc, #132]	; (8003328 <TIM_TI1_SetConfig+0xc0>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d00b      	beq.n	80032be <TIM_TI1_SetConfig+0x56>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4a20      	ldr	r2, [pc, #128]	; (800332c <TIM_TI1_SetConfig+0xc4>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d007      	beq.n	80032be <TIM_TI1_SetConfig+0x56>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	4a1f      	ldr	r2, [pc, #124]	; (8003330 <TIM_TI1_SetConfig+0xc8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d003      	beq.n	80032be <TIM_TI1_SetConfig+0x56>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4a1e      	ldr	r2, [pc, #120]	; (8003334 <TIM_TI1_SetConfig+0xcc>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d101      	bne.n	80032c2 <TIM_TI1_SetConfig+0x5a>
 80032be:	2301      	movs	r3, #1
 80032c0:	e000      	b.n	80032c4 <TIM_TI1_SetConfig+0x5c>
 80032c2:	2300      	movs	r3, #0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d008      	beq.n	80032da <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	f023 0303 	bic.w	r3, r3, #3
 80032ce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	e003      	b.n	80032e2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f043 0301 	orr.w	r3, r3, #1
 80032e0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	f023 030a 	bic.w	r3, r3, #10
 80032fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	f003 030a 	and.w	r3, r3, #10
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	4313      	orrs	r3, r2
 8003308:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	621a      	str	r2, [r3, #32]
}
 8003316:	bf00      	nop
 8003318:	371c      	adds	r7, #28
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40010000 	.word	0x40010000
 8003328:	40000400 	.word	0x40000400
 800332c:	40000800 	.word	0x40000800
 8003330:	40000c00 	.word	0x40000c00
 8003334:	40014000 	.word	0x40014000

08003338 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	f023 0201 	bic.w	r2, r3, #1
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003362:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	4313      	orrs	r3, r2
 800336c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f023 030a 	bic.w	r3, r3, #10
 8003374:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	4313      	orrs	r3, r2
 800337c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	621a      	str	r2, [r3, #32]
}
 800338a:	bf00      	nop
 800338c:	371c      	adds	r7, #28
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003396:	b480      	push	{r7}
 8003398:	b087      	sub	sp, #28
 800339a:	af00      	add	r7, sp, #0
 800339c:	60f8      	str	r0, [r7, #12]
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	607a      	str	r2, [r7, #4]
 80033a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	f023 0210 	bic.w	r2, r3, #16
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	021b      	lsls	r3, r3, #8
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	031b      	lsls	r3, r3, #12
 80033da:	b29b      	uxth	r3, r3
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	4313      	orrs	r3, r2
 80033e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033e8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	621a      	str	r2, [r3, #32]
}
 8003404:	bf00      	nop
 8003406:	371c      	adds	r7, #28
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003410:	b480      	push	{r7}
 8003412:	b087      	sub	sp, #28
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	f023 0210 	bic.w	r2, r3, #16
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800343a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	031b      	lsls	r3, r3, #12
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	4313      	orrs	r3, r2
 8003444:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800344c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	621a      	str	r2, [r3, #32]
}
 8003464:	bf00      	nop
 8003466:	371c      	adds	r7, #28
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003470:	b480      	push	{r7}
 8003472:	b087      	sub	sp, #28
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
 800347c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f023 0303 	bic.w	r3, r3, #3
 800349c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80034c0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	021b      	lsls	r3, r3, #8
 80034c6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	621a      	str	r2, [r3, #32]
}
 80034dc:	bf00      	nop
 80034de:	371c      	adds	r7, #28
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
 80034f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003514:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	021b      	lsls	r3, r3, #8
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	4313      	orrs	r3, r2
 800351e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003526:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	031b      	lsls	r3, r3, #12
 800352c:	b29b      	uxth	r3, r3
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	4313      	orrs	r3, r2
 8003532:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800353a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	031b      	lsls	r3, r3, #12
 8003540:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	4313      	orrs	r3, r2
 8003548:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	621a      	str	r2, [r3, #32]
}
 8003556:	bf00      	nop
 8003558:	371c      	adds	r7, #28
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003562:	b480      	push	{r7}
 8003564:	b085      	sub	sp, #20
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
 800356a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003578:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4313      	orrs	r3, r2
 8003580:	f043 0307 	orr.w	r3, r3, #7
 8003584:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	609a      	str	r2, [r3, #8]
}
 800358c:	bf00      	nop
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003598:	b480      	push	{r7}
 800359a:	b087      	sub	sp, #28
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
 80035a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	021a      	lsls	r2, r3, #8
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	431a      	orrs	r2, r3
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	4313      	orrs	r3, r2
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	609a      	str	r2, [r3, #8]
}
 80035cc:	bf00      	nop
 80035ce:	371c      	adds	r7, #28
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035d8:	b480      	push	{r7}
 80035da:	b087      	sub	sp, #28
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	f003 031f 	and.w	r3, r3, #31
 80035ea:	2201      	movs	r2, #1
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a1a      	ldr	r2, [r3, #32]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	43db      	mvns	r3, r3
 80035fa:	401a      	ands	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a1a      	ldr	r2, [r3, #32]
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	f003 031f 	and.w	r3, r3, #31
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	fa01 f303 	lsl.w	r3, r1, r3
 8003610:	431a      	orrs	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	621a      	str	r2, [r3, #32]
}
 8003616:	bf00      	nop
 8003618:	371c      	adds	r7, #28
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
	...

08003624 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003638:	2302      	movs	r3, #2
 800363a:	e050      	b.n	80036de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2202      	movs	r2, #2
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003662:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	4313      	orrs	r3, r2
 800366c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a1c      	ldr	r2, [pc, #112]	; (80036ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d018      	beq.n	80036b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003688:	d013      	beq.n	80036b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a18      	ldr	r2, [pc, #96]	; (80036f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00e      	beq.n	80036b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a16      	ldr	r2, [pc, #88]	; (80036f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d009      	beq.n	80036b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a15      	ldr	r2, [pc, #84]	; (80036f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d004      	beq.n	80036b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a13      	ldr	r2, [pc, #76]	; (80036fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d10c      	bne.n	80036cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	40010000 	.word	0x40010000
 80036f0:	40000400 	.word	0x40000400
 80036f4:	40000800 	.word	0x40000800
 80036f8:	40000c00 	.word	0x40000c00
 80036fc:	40014000 	.word	0x40014000

08003700 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003714:	2b01      	cmp	r3, #1
 8003716:	d101      	bne.n	800371c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003718:	2302      	movs	r3, #2
 800371a:	e03d      	b.n	8003798 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	4313      	orrs	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	4313      	orrs	r3, r2
 800373e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	4313      	orrs	r3, r2
 800374c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4313      	orrs	r3, r2
 800375a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	4313      	orrs	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	4313      	orrs	r3, r2
 8003776:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	4313      	orrs	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <__errno>:
 80037cc:	4b01      	ldr	r3, [pc, #4]	; (80037d4 <__errno+0x8>)
 80037ce:	6818      	ldr	r0, [r3, #0]
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	2000004c 	.word	0x2000004c

080037d8 <__libc_init_array>:
 80037d8:	b570      	push	{r4, r5, r6, lr}
 80037da:	4d0d      	ldr	r5, [pc, #52]	; (8003810 <__libc_init_array+0x38>)
 80037dc:	4c0d      	ldr	r4, [pc, #52]	; (8003814 <__libc_init_array+0x3c>)
 80037de:	1b64      	subs	r4, r4, r5
 80037e0:	10a4      	asrs	r4, r4, #2
 80037e2:	2600      	movs	r6, #0
 80037e4:	42a6      	cmp	r6, r4
 80037e6:	d109      	bne.n	80037fc <__libc_init_array+0x24>
 80037e8:	4d0b      	ldr	r5, [pc, #44]	; (8003818 <__libc_init_array+0x40>)
 80037ea:	4c0c      	ldr	r4, [pc, #48]	; (800381c <__libc_init_array+0x44>)
 80037ec:	f000 fc8e 	bl	800410c <_init>
 80037f0:	1b64      	subs	r4, r4, r5
 80037f2:	10a4      	asrs	r4, r4, #2
 80037f4:	2600      	movs	r6, #0
 80037f6:	42a6      	cmp	r6, r4
 80037f8:	d105      	bne.n	8003806 <__libc_init_array+0x2e>
 80037fa:	bd70      	pop	{r4, r5, r6, pc}
 80037fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003800:	4798      	blx	r3
 8003802:	3601      	adds	r6, #1
 8003804:	e7ee      	b.n	80037e4 <__libc_init_array+0xc>
 8003806:	f855 3b04 	ldr.w	r3, [r5], #4
 800380a:	4798      	blx	r3
 800380c:	3601      	adds	r6, #1
 800380e:	e7f2      	b.n	80037f6 <__libc_init_array+0x1e>
 8003810:	08004180 	.word	0x08004180
 8003814:	08004180 	.word	0x08004180
 8003818:	08004180 	.word	0x08004180
 800381c:	08004184 	.word	0x08004184

08003820 <memset>:
 8003820:	4402      	add	r2, r0
 8003822:	4603      	mov	r3, r0
 8003824:	4293      	cmp	r3, r2
 8003826:	d100      	bne.n	800382a <memset+0xa>
 8003828:	4770      	bx	lr
 800382a:	f803 1b01 	strb.w	r1, [r3], #1
 800382e:	e7f9      	b.n	8003824 <memset+0x4>

08003830 <siprintf>:
 8003830:	b40e      	push	{r1, r2, r3}
 8003832:	b500      	push	{lr}
 8003834:	b09c      	sub	sp, #112	; 0x70
 8003836:	ab1d      	add	r3, sp, #116	; 0x74
 8003838:	9002      	str	r0, [sp, #8]
 800383a:	9006      	str	r0, [sp, #24]
 800383c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003840:	4809      	ldr	r0, [pc, #36]	; (8003868 <siprintf+0x38>)
 8003842:	9107      	str	r1, [sp, #28]
 8003844:	9104      	str	r1, [sp, #16]
 8003846:	4909      	ldr	r1, [pc, #36]	; (800386c <siprintf+0x3c>)
 8003848:	f853 2b04 	ldr.w	r2, [r3], #4
 800384c:	9105      	str	r1, [sp, #20]
 800384e:	6800      	ldr	r0, [r0, #0]
 8003850:	9301      	str	r3, [sp, #4]
 8003852:	a902      	add	r1, sp, #8
 8003854:	f000 f868 	bl	8003928 <_svfiprintf_r>
 8003858:	9b02      	ldr	r3, [sp, #8]
 800385a:	2200      	movs	r2, #0
 800385c:	701a      	strb	r2, [r3, #0]
 800385e:	b01c      	add	sp, #112	; 0x70
 8003860:	f85d eb04 	ldr.w	lr, [sp], #4
 8003864:	b003      	add	sp, #12
 8003866:	4770      	bx	lr
 8003868:	2000004c 	.word	0x2000004c
 800386c:	ffff0208 	.word	0xffff0208

08003870 <__ssputs_r>:
 8003870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003874:	688e      	ldr	r6, [r1, #8]
 8003876:	429e      	cmp	r6, r3
 8003878:	4682      	mov	sl, r0
 800387a:	460c      	mov	r4, r1
 800387c:	4690      	mov	r8, r2
 800387e:	461f      	mov	r7, r3
 8003880:	d838      	bhi.n	80038f4 <__ssputs_r+0x84>
 8003882:	898a      	ldrh	r2, [r1, #12]
 8003884:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003888:	d032      	beq.n	80038f0 <__ssputs_r+0x80>
 800388a:	6825      	ldr	r5, [r4, #0]
 800388c:	6909      	ldr	r1, [r1, #16]
 800388e:	eba5 0901 	sub.w	r9, r5, r1
 8003892:	6965      	ldr	r5, [r4, #20]
 8003894:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003898:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800389c:	3301      	adds	r3, #1
 800389e:	444b      	add	r3, r9
 80038a0:	106d      	asrs	r5, r5, #1
 80038a2:	429d      	cmp	r5, r3
 80038a4:	bf38      	it	cc
 80038a6:	461d      	movcc	r5, r3
 80038a8:	0553      	lsls	r3, r2, #21
 80038aa:	d531      	bpl.n	8003910 <__ssputs_r+0xa0>
 80038ac:	4629      	mov	r1, r5
 80038ae:	f000 fb63 	bl	8003f78 <_malloc_r>
 80038b2:	4606      	mov	r6, r0
 80038b4:	b950      	cbnz	r0, 80038cc <__ssputs_r+0x5c>
 80038b6:	230c      	movs	r3, #12
 80038b8:	f8ca 3000 	str.w	r3, [sl]
 80038bc:	89a3      	ldrh	r3, [r4, #12]
 80038be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038c2:	81a3      	strh	r3, [r4, #12]
 80038c4:	f04f 30ff 	mov.w	r0, #4294967295
 80038c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038cc:	6921      	ldr	r1, [r4, #16]
 80038ce:	464a      	mov	r2, r9
 80038d0:	f000 fabe 	bl	8003e50 <memcpy>
 80038d4:	89a3      	ldrh	r3, [r4, #12]
 80038d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80038da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038de:	81a3      	strh	r3, [r4, #12]
 80038e0:	6126      	str	r6, [r4, #16]
 80038e2:	6165      	str	r5, [r4, #20]
 80038e4:	444e      	add	r6, r9
 80038e6:	eba5 0509 	sub.w	r5, r5, r9
 80038ea:	6026      	str	r6, [r4, #0]
 80038ec:	60a5      	str	r5, [r4, #8]
 80038ee:	463e      	mov	r6, r7
 80038f0:	42be      	cmp	r6, r7
 80038f2:	d900      	bls.n	80038f6 <__ssputs_r+0x86>
 80038f4:	463e      	mov	r6, r7
 80038f6:	6820      	ldr	r0, [r4, #0]
 80038f8:	4632      	mov	r2, r6
 80038fa:	4641      	mov	r1, r8
 80038fc:	f000 fab6 	bl	8003e6c <memmove>
 8003900:	68a3      	ldr	r3, [r4, #8]
 8003902:	1b9b      	subs	r3, r3, r6
 8003904:	60a3      	str	r3, [r4, #8]
 8003906:	6823      	ldr	r3, [r4, #0]
 8003908:	4433      	add	r3, r6
 800390a:	6023      	str	r3, [r4, #0]
 800390c:	2000      	movs	r0, #0
 800390e:	e7db      	b.n	80038c8 <__ssputs_r+0x58>
 8003910:	462a      	mov	r2, r5
 8003912:	f000 fba5 	bl	8004060 <_realloc_r>
 8003916:	4606      	mov	r6, r0
 8003918:	2800      	cmp	r0, #0
 800391a:	d1e1      	bne.n	80038e0 <__ssputs_r+0x70>
 800391c:	6921      	ldr	r1, [r4, #16]
 800391e:	4650      	mov	r0, sl
 8003920:	f000 fabe 	bl	8003ea0 <_free_r>
 8003924:	e7c7      	b.n	80038b6 <__ssputs_r+0x46>
	...

08003928 <_svfiprintf_r>:
 8003928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800392c:	4698      	mov	r8, r3
 800392e:	898b      	ldrh	r3, [r1, #12]
 8003930:	061b      	lsls	r3, r3, #24
 8003932:	b09d      	sub	sp, #116	; 0x74
 8003934:	4607      	mov	r7, r0
 8003936:	460d      	mov	r5, r1
 8003938:	4614      	mov	r4, r2
 800393a:	d50e      	bpl.n	800395a <_svfiprintf_r+0x32>
 800393c:	690b      	ldr	r3, [r1, #16]
 800393e:	b963      	cbnz	r3, 800395a <_svfiprintf_r+0x32>
 8003940:	2140      	movs	r1, #64	; 0x40
 8003942:	f000 fb19 	bl	8003f78 <_malloc_r>
 8003946:	6028      	str	r0, [r5, #0]
 8003948:	6128      	str	r0, [r5, #16]
 800394a:	b920      	cbnz	r0, 8003956 <_svfiprintf_r+0x2e>
 800394c:	230c      	movs	r3, #12
 800394e:	603b      	str	r3, [r7, #0]
 8003950:	f04f 30ff 	mov.w	r0, #4294967295
 8003954:	e0d1      	b.n	8003afa <_svfiprintf_r+0x1d2>
 8003956:	2340      	movs	r3, #64	; 0x40
 8003958:	616b      	str	r3, [r5, #20]
 800395a:	2300      	movs	r3, #0
 800395c:	9309      	str	r3, [sp, #36]	; 0x24
 800395e:	2320      	movs	r3, #32
 8003960:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003964:	f8cd 800c 	str.w	r8, [sp, #12]
 8003968:	2330      	movs	r3, #48	; 0x30
 800396a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003b14 <_svfiprintf_r+0x1ec>
 800396e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003972:	f04f 0901 	mov.w	r9, #1
 8003976:	4623      	mov	r3, r4
 8003978:	469a      	mov	sl, r3
 800397a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800397e:	b10a      	cbz	r2, 8003984 <_svfiprintf_r+0x5c>
 8003980:	2a25      	cmp	r2, #37	; 0x25
 8003982:	d1f9      	bne.n	8003978 <_svfiprintf_r+0x50>
 8003984:	ebba 0b04 	subs.w	fp, sl, r4
 8003988:	d00b      	beq.n	80039a2 <_svfiprintf_r+0x7a>
 800398a:	465b      	mov	r3, fp
 800398c:	4622      	mov	r2, r4
 800398e:	4629      	mov	r1, r5
 8003990:	4638      	mov	r0, r7
 8003992:	f7ff ff6d 	bl	8003870 <__ssputs_r>
 8003996:	3001      	adds	r0, #1
 8003998:	f000 80aa 	beq.w	8003af0 <_svfiprintf_r+0x1c8>
 800399c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800399e:	445a      	add	r2, fp
 80039a0:	9209      	str	r2, [sp, #36]	; 0x24
 80039a2:	f89a 3000 	ldrb.w	r3, [sl]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 80a2 	beq.w	8003af0 <_svfiprintf_r+0x1c8>
 80039ac:	2300      	movs	r3, #0
 80039ae:	f04f 32ff 	mov.w	r2, #4294967295
 80039b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039b6:	f10a 0a01 	add.w	sl, sl, #1
 80039ba:	9304      	str	r3, [sp, #16]
 80039bc:	9307      	str	r3, [sp, #28]
 80039be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039c2:	931a      	str	r3, [sp, #104]	; 0x68
 80039c4:	4654      	mov	r4, sl
 80039c6:	2205      	movs	r2, #5
 80039c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039cc:	4851      	ldr	r0, [pc, #324]	; (8003b14 <_svfiprintf_r+0x1ec>)
 80039ce:	f7fc fc0f 	bl	80001f0 <memchr>
 80039d2:	9a04      	ldr	r2, [sp, #16]
 80039d4:	b9d8      	cbnz	r0, 8003a0e <_svfiprintf_r+0xe6>
 80039d6:	06d0      	lsls	r0, r2, #27
 80039d8:	bf44      	itt	mi
 80039da:	2320      	movmi	r3, #32
 80039dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039e0:	0711      	lsls	r1, r2, #28
 80039e2:	bf44      	itt	mi
 80039e4:	232b      	movmi	r3, #43	; 0x2b
 80039e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039ea:	f89a 3000 	ldrb.w	r3, [sl]
 80039ee:	2b2a      	cmp	r3, #42	; 0x2a
 80039f0:	d015      	beq.n	8003a1e <_svfiprintf_r+0xf6>
 80039f2:	9a07      	ldr	r2, [sp, #28]
 80039f4:	4654      	mov	r4, sl
 80039f6:	2000      	movs	r0, #0
 80039f8:	f04f 0c0a 	mov.w	ip, #10
 80039fc:	4621      	mov	r1, r4
 80039fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a02:	3b30      	subs	r3, #48	; 0x30
 8003a04:	2b09      	cmp	r3, #9
 8003a06:	d94e      	bls.n	8003aa6 <_svfiprintf_r+0x17e>
 8003a08:	b1b0      	cbz	r0, 8003a38 <_svfiprintf_r+0x110>
 8003a0a:	9207      	str	r2, [sp, #28]
 8003a0c:	e014      	b.n	8003a38 <_svfiprintf_r+0x110>
 8003a0e:	eba0 0308 	sub.w	r3, r0, r8
 8003a12:	fa09 f303 	lsl.w	r3, r9, r3
 8003a16:	4313      	orrs	r3, r2
 8003a18:	9304      	str	r3, [sp, #16]
 8003a1a:	46a2      	mov	sl, r4
 8003a1c:	e7d2      	b.n	80039c4 <_svfiprintf_r+0x9c>
 8003a1e:	9b03      	ldr	r3, [sp, #12]
 8003a20:	1d19      	adds	r1, r3, #4
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	9103      	str	r1, [sp, #12]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	bfbb      	ittet	lt
 8003a2a:	425b      	neglt	r3, r3
 8003a2c:	f042 0202 	orrlt.w	r2, r2, #2
 8003a30:	9307      	strge	r3, [sp, #28]
 8003a32:	9307      	strlt	r3, [sp, #28]
 8003a34:	bfb8      	it	lt
 8003a36:	9204      	strlt	r2, [sp, #16]
 8003a38:	7823      	ldrb	r3, [r4, #0]
 8003a3a:	2b2e      	cmp	r3, #46	; 0x2e
 8003a3c:	d10c      	bne.n	8003a58 <_svfiprintf_r+0x130>
 8003a3e:	7863      	ldrb	r3, [r4, #1]
 8003a40:	2b2a      	cmp	r3, #42	; 0x2a
 8003a42:	d135      	bne.n	8003ab0 <_svfiprintf_r+0x188>
 8003a44:	9b03      	ldr	r3, [sp, #12]
 8003a46:	1d1a      	adds	r2, r3, #4
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	9203      	str	r2, [sp, #12]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	bfb8      	it	lt
 8003a50:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a54:	3402      	adds	r4, #2
 8003a56:	9305      	str	r3, [sp, #20]
 8003a58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003b24 <_svfiprintf_r+0x1fc>
 8003a5c:	7821      	ldrb	r1, [r4, #0]
 8003a5e:	2203      	movs	r2, #3
 8003a60:	4650      	mov	r0, sl
 8003a62:	f7fc fbc5 	bl	80001f0 <memchr>
 8003a66:	b140      	cbz	r0, 8003a7a <_svfiprintf_r+0x152>
 8003a68:	2340      	movs	r3, #64	; 0x40
 8003a6a:	eba0 000a 	sub.w	r0, r0, sl
 8003a6e:	fa03 f000 	lsl.w	r0, r3, r0
 8003a72:	9b04      	ldr	r3, [sp, #16]
 8003a74:	4303      	orrs	r3, r0
 8003a76:	3401      	adds	r4, #1
 8003a78:	9304      	str	r3, [sp, #16]
 8003a7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a7e:	4826      	ldr	r0, [pc, #152]	; (8003b18 <_svfiprintf_r+0x1f0>)
 8003a80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a84:	2206      	movs	r2, #6
 8003a86:	f7fc fbb3 	bl	80001f0 <memchr>
 8003a8a:	2800      	cmp	r0, #0
 8003a8c:	d038      	beq.n	8003b00 <_svfiprintf_r+0x1d8>
 8003a8e:	4b23      	ldr	r3, [pc, #140]	; (8003b1c <_svfiprintf_r+0x1f4>)
 8003a90:	bb1b      	cbnz	r3, 8003ada <_svfiprintf_r+0x1b2>
 8003a92:	9b03      	ldr	r3, [sp, #12]
 8003a94:	3307      	adds	r3, #7
 8003a96:	f023 0307 	bic.w	r3, r3, #7
 8003a9a:	3308      	adds	r3, #8
 8003a9c:	9303      	str	r3, [sp, #12]
 8003a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003aa0:	4433      	add	r3, r6
 8003aa2:	9309      	str	r3, [sp, #36]	; 0x24
 8003aa4:	e767      	b.n	8003976 <_svfiprintf_r+0x4e>
 8003aa6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003aaa:	460c      	mov	r4, r1
 8003aac:	2001      	movs	r0, #1
 8003aae:	e7a5      	b.n	80039fc <_svfiprintf_r+0xd4>
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	3401      	adds	r4, #1
 8003ab4:	9305      	str	r3, [sp, #20]
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	f04f 0c0a 	mov.w	ip, #10
 8003abc:	4620      	mov	r0, r4
 8003abe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ac2:	3a30      	subs	r2, #48	; 0x30
 8003ac4:	2a09      	cmp	r2, #9
 8003ac6:	d903      	bls.n	8003ad0 <_svfiprintf_r+0x1a8>
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0c5      	beq.n	8003a58 <_svfiprintf_r+0x130>
 8003acc:	9105      	str	r1, [sp, #20]
 8003ace:	e7c3      	b.n	8003a58 <_svfiprintf_r+0x130>
 8003ad0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ad4:	4604      	mov	r4, r0
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e7f0      	b.n	8003abc <_svfiprintf_r+0x194>
 8003ada:	ab03      	add	r3, sp, #12
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	462a      	mov	r2, r5
 8003ae0:	4b0f      	ldr	r3, [pc, #60]	; (8003b20 <_svfiprintf_r+0x1f8>)
 8003ae2:	a904      	add	r1, sp, #16
 8003ae4:	4638      	mov	r0, r7
 8003ae6:	f3af 8000 	nop.w
 8003aea:	1c42      	adds	r2, r0, #1
 8003aec:	4606      	mov	r6, r0
 8003aee:	d1d6      	bne.n	8003a9e <_svfiprintf_r+0x176>
 8003af0:	89ab      	ldrh	r3, [r5, #12]
 8003af2:	065b      	lsls	r3, r3, #25
 8003af4:	f53f af2c 	bmi.w	8003950 <_svfiprintf_r+0x28>
 8003af8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003afa:	b01d      	add	sp, #116	; 0x74
 8003afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b00:	ab03      	add	r3, sp, #12
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	462a      	mov	r2, r5
 8003b06:	4b06      	ldr	r3, [pc, #24]	; (8003b20 <_svfiprintf_r+0x1f8>)
 8003b08:	a904      	add	r1, sp, #16
 8003b0a:	4638      	mov	r0, r7
 8003b0c:	f000 f87a 	bl	8003c04 <_printf_i>
 8003b10:	e7eb      	b.n	8003aea <_svfiprintf_r+0x1c2>
 8003b12:	bf00      	nop
 8003b14:	08004144 	.word	0x08004144
 8003b18:	0800414e 	.word	0x0800414e
 8003b1c:	00000000 	.word	0x00000000
 8003b20:	08003871 	.word	0x08003871
 8003b24:	0800414a 	.word	0x0800414a

08003b28 <_printf_common>:
 8003b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b2c:	4616      	mov	r6, r2
 8003b2e:	4699      	mov	r9, r3
 8003b30:	688a      	ldr	r2, [r1, #8]
 8003b32:	690b      	ldr	r3, [r1, #16]
 8003b34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	bfb8      	it	lt
 8003b3c:	4613      	movlt	r3, r2
 8003b3e:	6033      	str	r3, [r6, #0]
 8003b40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b44:	4607      	mov	r7, r0
 8003b46:	460c      	mov	r4, r1
 8003b48:	b10a      	cbz	r2, 8003b4e <_printf_common+0x26>
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	6033      	str	r3, [r6, #0]
 8003b4e:	6823      	ldr	r3, [r4, #0]
 8003b50:	0699      	lsls	r1, r3, #26
 8003b52:	bf42      	ittt	mi
 8003b54:	6833      	ldrmi	r3, [r6, #0]
 8003b56:	3302      	addmi	r3, #2
 8003b58:	6033      	strmi	r3, [r6, #0]
 8003b5a:	6825      	ldr	r5, [r4, #0]
 8003b5c:	f015 0506 	ands.w	r5, r5, #6
 8003b60:	d106      	bne.n	8003b70 <_printf_common+0x48>
 8003b62:	f104 0a19 	add.w	sl, r4, #25
 8003b66:	68e3      	ldr	r3, [r4, #12]
 8003b68:	6832      	ldr	r2, [r6, #0]
 8003b6a:	1a9b      	subs	r3, r3, r2
 8003b6c:	42ab      	cmp	r3, r5
 8003b6e:	dc26      	bgt.n	8003bbe <_printf_common+0x96>
 8003b70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b74:	1e13      	subs	r3, r2, #0
 8003b76:	6822      	ldr	r2, [r4, #0]
 8003b78:	bf18      	it	ne
 8003b7a:	2301      	movne	r3, #1
 8003b7c:	0692      	lsls	r2, r2, #26
 8003b7e:	d42b      	bmi.n	8003bd8 <_printf_common+0xb0>
 8003b80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b84:	4649      	mov	r1, r9
 8003b86:	4638      	mov	r0, r7
 8003b88:	47c0      	blx	r8
 8003b8a:	3001      	adds	r0, #1
 8003b8c:	d01e      	beq.n	8003bcc <_printf_common+0xa4>
 8003b8e:	6823      	ldr	r3, [r4, #0]
 8003b90:	68e5      	ldr	r5, [r4, #12]
 8003b92:	6832      	ldr	r2, [r6, #0]
 8003b94:	f003 0306 	and.w	r3, r3, #6
 8003b98:	2b04      	cmp	r3, #4
 8003b9a:	bf08      	it	eq
 8003b9c:	1aad      	subeq	r5, r5, r2
 8003b9e:	68a3      	ldr	r3, [r4, #8]
 8003ba0:	6922      	ldr	r2, [r4, #16]
 8003ba2:	bf0c      	ite	eq
 8003ba4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ba8:	2500      	movne	r5, #0
 8003baa:	4293      	cmp	r3, r2
 8003bac:	bfc4      	itt	gt
 8003bae:	1a9b      	subgt	r3, r3, r2
 8003bb0:	18ed      	addgt	r5, r5, r3
 8003bb2:	2600      	movs	r6, #0
 8003bb4:	341a      	adds	r4, #26
 8003bb6:	42b5      	cmp	r5, r6
 8003bb8:	d11a      	bne.n	8003bf0 <_printf_common+0xc8>
 8003bba:	2000      	movs	r0, #0
 8003bbc:	e008      	b.n	8003bd0 <_printf_common+0xa8>
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	4652      	mov	r2, sl
 8003bc2:	4649      	mov	r1, r9
 8003bc4:	4638      	mov	r0, r7
 8003bc6:	47c0      	blx	r8
 8003bc8:	3001      	adds	r0, #1
 8003bca:	d103      	bne.n	8003bd4 <_printf_common+0xac>
 8003bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bd4:	3501      	adds	r5, #1
 8003bd6:	e7c6      	b.n	8003b66 <_printf_common+0x3e>
 8003bd8:	18e1      	adds	r1, r4, r3
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	2030      	movs	r0, #48	; 0x30
 8003bde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003be2:	4422      	add	r2, r4
 8003be4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003be8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003bec:	3302      	adds	r3, #2
 8003bee:	e7c7      	b.n	8003b80 <_printf_common+0x58>
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	4622      	mov	r2, r4
 8003bf4:	4649      	mov	r1, r9
 8003bf6:	4638      	mov	r0, r7
 8003bf8:	47c0      	blx	r8
 8003bfa:	3001      	adds	r0, #1
 8003bfc:	d0e6      	beq.n	8003bcc <_printf_common+0xa4>
 8003bfe:	3601      	adds	r6, #1
 8003c00:	e7d9      	b.n	8003bb6 <_printf_common+0x8e>
	...

08003c04 <_printf_i>:
 8003c04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c08:	7e0f      	ldrb	r7, [r1, #24]
 8003c0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c0c:	2f78      	cmp	r7, #120	; 0x78
 8003c0e:	4691      	mov	r9, r2
 8003c10:	4680      	mov	r8, r0
 8003c12:	460c      	mov	r4, r1
 8003c14:	469a      	mov	sl, r3
 8003c16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c1a:	d807      	bhi.n	8003c2c <_printf_i+0x28>
 8003c1c:	2f62      	cmp	r7, #98	; 0x62
 8003c1e:	d80a      	bhi.n	8003c36 <_printf_i+0x32>
 8003c20:	2f00      	cmp	r7, #0
 8003c22:	f000 80d8 	beq.w	8003dd6 <_printf_i+0x1d2>
 8003c26:	2f58      	cmp	r7, #88	; 0x58
 8003c28:	f000 80a3 	beq.w	8003d72 <_printf_i+0x16e>
 8003c2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c34:	e03a      	b.n	8003cac <_printf_i+0xa8>
 8003c36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c3a:	2b15      	cmp	r3, #21
 8003c3c:	d8f6      	bhi.n	8003c2c <_printf_i+0x28>
 8003c3e:	a101      	add	r1, pc, #4	; (adr r1, 8003c44 <_printf_i+0x40>)
 8003c40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c44:	08003c9d 	.word	0x08003c9d
 8003c48:	08003cb1 	.word	0x08003cb1
 8003c4c:	08003c2d 	.word	0x08003c2d
 8003c50:	08003c2d 	.word	0x08003c2d
 8003c54:	08003c2d 	.word	0x08003c2d
 8003c58:	08003c2d 	.word	0x08003c2d
 8003c5c:	08003cb1 	.word	0x08003cb1
 8003c60:	08003c2d 	.word	0x08003c2d
 8003c64:	08003c2d 	.word	0x08003c2d
 8003c68:	08003c2d 	.word	0x08003c2d
 8003c6c:	08003c2d 	.word	0x08003c2d
 8003c70:	08003dbd 	.word	0x08003dbd
 8003c74:	08003ce1 	.word	0x08003ce1
 8003c78:	08003d9f 	.word	0x08003d9f
 8003c7c:	08003c2d 	.word	0x08003c2d
 8003c80:	08003c2d 	.word	0x08003c2d
 8003c84:	08003ddf 	.word	0x08003ddf
 8003c88:	08003c2d 	.word	0x08003c2d
 8003c8c:	08003ce1 	.word	0x08003ce1
 8003c90:	08003c2d 	.word	0x08003c2d
 8003c94:	08003c2d 	.word	0x08003c2d
 8003c98:	08003da7 	.word	0x08003da7
 8003c9c:	682b      	ldr	r3, [r5, #0]
 8003c9e:	1d1a      	adds	r2, r3, #4
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	602a      	str	r2, [r5, #0]
 8003ca4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ca8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003cac:	2301      	movs	r3, #1
 8003cae:	e0a3      	b.n	8003df8 <_printf_i+0x1f4>
 8003cb0:	6820      	ldr	r0, [r4, #0]
 8003cb2:	6829      	ldr	r1, [r5, #0]
 8003cb4:	0606      	lsls	r6, r0, #24
 8003cb6:	f101 0304 	add.w	r3, r1, #4
 8003cba:	d50a      	bpl.n	8003cd2 <_printf_i+0xce>
 8003cbc:	680e      	ldr	r6, [r1, #0]
 8003cbe:	602b      	str	r3, [r5, #0]
 8003cc0:	2e00      	cmp	r6, #0
 8003cc2:	da03      	bge.n	8003ccc <_printf_i+0xc8>
 8003cc4:	232d      	movs	r3, #45	; 0x2d
 8003cc6:	4276      	negs	r6, r6
 8003cc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ccc:	485e      	ldr	r0, [pc, #376]	; (8003e48 <_printf_i+0x244>)
 8003cce:	230a      	movs	r3, #10
 8003cd0:	e019      	b.n	8003d06 <_printf_i+0x102>
 8003cd2:	680e      	ldr	r6, [r1, #0]
 8003cd4:	602b      	str	r3, [r5, #0]
 8003cd6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003cda:	bf18      	it	ne
 8003cdc:	b236      	sxthne	r6, r6
 8003cde:	e7ef      	b.n	8003cc0 <_printf_i+0xbc>
 8003ce0:	682b      	ldr	r3, [r5, #0]
 8003ce2:	6820      	ldr	r0, [r4, #0]
 8003ce4:	1d19      	adds	r1, r3, #4
 8003ce6:	6029      	str	r1, [r5, #0]
 8003ce8:	0601      	lsls	r1, r0, #24
 8003cea:	d501      	bpl.n	8003cf0 <_printf_i+0xec>
 8003cec:	681e      	ldr	r6, [r3, #0]
 8003cee:	e002      	b.n	8003cf6 <_printf_i+0xf2>
 8003cf0:	0646      	lsls	r6, r0, #25
 8003cf2:	d5fb      	bpl.n	8003cec <_printf_i+0xe8>
 8003cf4:	881e      	ldrh	r6, [r3, #0]
 8003cf6:	4854      	ldr	r0, [pc, #336]	; (8003e48 <_printf_i+0x244>)
 8003cf8:	2f6f      	cmp	r7, #111	; 0x6f
 8003cfa:	bf0c      	ite	eq
 8003cfc:	2308      	moveq	r3, #8
 8003cfe:	230a      	movne	r3, #10
 8003d00:	2100      	movs	r1, #0
 8003d02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d06:	6865      	ldr	r5, [r4, #4]
 8003d08:	60a5      	str	r5, [r4, #8]
 8003d0a:	2d00      	cmp	r5, #0
 8003d0c:	bfa2      	ittt	ge
 8003d0e:	6821      	ldrge	r1, [r4, #0]
 8003d10:	f021 0104 	bicge.w	r1, r1, #4
 8003d14:	6021      	strge	r1, [r4, #0]
 8003d16:	b90e      	cbnz	r6, 8003d1c <_printf_i+0x118>
 8003d18:	2d00      	cmp	r5, #0
 8003d1a:	d04d      	beq.n	8003db8 <_printf_i+0x1b4>
 8003d1c:	4615      	mov	r5, r2
 8003d1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d22:	fb03 6711 	mls	r7, r3, r1, r6
 8003d26:	5dc7      	ldrb	r7, [r0, r7]
 8003d28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d2c:	4637      	mov	r7, r6
 8003d2e:	42bb      	cmp	r3, r7
 8003d30:	460e      	mov	r6, r1
 8003d32:	d9f4      	bls.n	8003d1e <_printf_i+0x11a>
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	d10b      	bne.n	8003d50 <_printf_i+0x14c>
 8003d38:	6823      	ldr	r3, [r4, #0]
 8003d3a:	07de      	lsls	r6, r3, #31
 8003d3c:	d508      	bpl.n	8003d50 <_printf_i+0x14c>
 8003d3e:	6923      	ldr	r3, [r4, #16]
 8003d40:	6861      	ldr	r1, [r4, #4]
 8003d42:	4299      	cmp	r1, r3
 8003d44:	bfde      	ittt	le
 8003d46:	2330      	movle	r3, #48	; 0x30
 8003d48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d50:	1b52      	subs	r2, r2, r5
 8003d52:	6122      	str	r2, [r4, #16]
 8003d54:	f8cd a000 	str.w	sl, [sp]
 8003d58:	464b      	mov	r3, r9
 8003d5a:	aa03      	add	r2, sp, #12
 8003d5c:	4621      	mov	r1, r4
 8003d5e:	4640      	mov	r0, r8
 8003d60:	f7ff fee2 	bl	8003b28 <_printf_common>
 8003d64:	3001      	adds	r0, #1
 8003d66:	d14c      	bne.n	8003e02 <_printf_i+0x1fe>
 8003d68:	f04f 30ff 	mov.w	r0, #4294967295
 8003d6c:	b004      	add	sp, #16
 8003d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d72:	4835      	ldr	r0, [pc, #212]	; (8003e48 <_printf_i+0x244>)
 8003d74:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d78:	6829      	ldr	r1, [r5, #0]
 8003d7a:	6823      	ldr	r3, [r4, #0]
 8003d7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d80:	6029      	str	r1, [r5, #0]
 8003d82:	061d      	lsls	r5, r3, #24
 8003d84:	d514      	bpl.n	8003db0 <_printf_i+0x1ac>
 8003d86:	07df      	lsls	r7, r3, #31
 8003d88:	bf44      	itt	mi
 8003d8a:	f043 0320 	orrmi.w	r3, r3, #32
 8003d8e:	6023      	strmi	r3, [r4, #0]
 8003d90:	b91e      	cbnz	r6, 8003d9a <_printf_i+0x196>
 8003d92:	6823      	ldr	r3, [r4, #0]
 8003d94:	f023 0320 	bic.w	r3, r3, #32
 8003d98:	6023      	str	r3, [r4, #0]
 8003d9a:	2310      	movs	r3, #16
 8003d9c:	e7b0      	b.n	8003d00 <_printf_i+0xfc>
 8003d9e:	6823      	ldr	r3, [r4, #0]
 8003da0:	f043 0320 	orr.w	r3, r3, #32
 8003da4:	6023      	str	r3, [r4, #0]
 8003da6:	2378      	movs	r3, #120	; 0x78
 8003da8:	4828      	ldr	r0, [pc, #160]	; (8003e4c <_printf_i+0x248>)
 8003daa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003dae:	e7e3      	b.n	8003d78 <_printf_i+0x174>
 8003db0:	0659      	lsls	r1, r3, #25
 8003db2:	bf48      	it	mi
 8003db4:	b2b6      	uxthmi	r6, r6
 8003db6:	e7e6      	b.n	8003d86 <_printf_i+0x182>
 8003db8:	4615      	mov	r5, r2
 8003dba:	e7bb      	b.n	8003d34 <_printf_i+0x130>
 8003dbc:	682b      	ldr	r3, [r5, #0]
 8003dbe:	6826      	ldr	r6, [r4, #0]
 8003dc0:	6961      	ldr	r1, [r4, #20]
 8003dc2:	1d18      	adds	r0, r3, #4
 8003dc4:	6028      	str	r0, [r5, #0]
 8003dc6:	0635      	lsls	r5, r6, #24
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	d501      	bpl.n	8003dd0 <_printf_i+0x1cc>
 8003dcc:	6019      	str	r1, [r3, #0]
 8003dce:	e002      	b.n	8003dd6 <_printf_i+0x1d2>
 8003dd0:	0670      	lsls	r0, r6, #25
 8003dd2:	d5fb      	bpl.n	8003dcc <_printf_i+0x1c8>
 8003dd4:	8019      	strh	r1, [r3, #0]
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	6123      	str	r3, [r4, #16]
 8003dda:	4615      	mov	r5, r2
 8003ddc:	e7ba      	b.n	8003d54 <_printf_i+0x150>
 8003dde:	682b      	ldr	r3, [r5, #0]
 8003de0:	1d1a      	adds	r2, r3, #4
 8003de2:	602a      	str	r2, [r5, #0]
 8003de4:	681d      	ldr	r5, [r3, #0]
 8003de6:	6862      	ldr	r2, [r4, #4]
 8003de8:	2100      	movs	r1, #0
 8003dea:	4628      	mov	r0, r5
 8003dec:	f7fc fa00 	bl	80001f0 <memchr>
 8003df0:	b108      	cbz	r0, 8003df6 <_printf_i+0x1f2>
 8003df2:	1b40      	subs	r0, r0, r5
 8003df4:	6060      	str	r0, [r4, #4]
 8003df6:	6863      	ldr	r3, [r4, #4]
 8003df8:	6123      	str	r3, [r4, #16]
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e00:	e7a8      	b.n	8003d54 <_printf_i+0x150>
 8003e02:	6923      	ldr	r3, [r4, #16]
 8003e04:	462a      	mov	r2, r5
 8003e06:	4649      	mov	r1, r9
 8003e08:	4640      	mov	r0, r8
 8003e0a:	47d0      	blx	sl
 8003e0c:	3001      	adds	r0, #1
 8003e0e:	d0ab      	beq.n	8003d68 <_printf_i+0x164>
 8003e10:	6823      	ldr	r3, [r4, #0]
 8003e12:	079b      	lsls	r3, r3, #30
 8003e14:	d413      	bmi.n	8003e3e <_printf_i+0x23a>
 8003e16:	68e0      	ldr	r0, [r4, #12]
 8003e18:	9b03      	ldr	r3, [sp, #12]
 8003e1a:	4298      	cmp	r0, r3
 8003e1c:	bfb8      	it	lt
 8003e1e:	4618      	movlt	r0, r3
 8003e20:	e7a4      	b.n	8003d6c <_printf_i+0x168>
 8003e22:	2301      	movs	r3, #1
 8003e24:	4632      	mov	r2, r6
 8003e26:	4649      	mov	r1, r9
 8003e28:	4640      	mov	r0, r8
 8003e2a:	47d0      	blx	sl
 8003e2c:	3001      	adds	r0, #1
 8003e2e:	d09b      	beq.n	8003d68 <_printf_i+0x164>
 8003e30:	3501      	adds	r5, #1
 8003e32:	68e3      	ldr	r3, [r4, #12]
 8003e34:	9903      	ldr	r1, [sp, #12]
 8003e36:	1a5b      	subs	r3, r3, r1
 8003e38:	42ab      	cmp	r3, r5
 8003e3a:	dcf2      	bgt.n	8003e22 <_printf_i+0x21e>
 8003e3c:	e7eb      	b.n	8003e16 <_printf_i+0x212>
 8003e3e:	2500      	movs	r5, #0
 8003e40:	f104 0619 	add.w	r6, r4, #25
 8003e44:	e7f5      	b.n	8003e32 <_printf_i+0x22e>
 8003e46:	bf00      	nop
 8003e48:	08004155 	.word	0x08004155
 8003e4c:	08004166 	.word	0x08004166

08003e50 <memcpy>:
 8003e50:	440a      	add	r2, r1
 8003e52:	4291      	cmp	r1, r2
 8003e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e58:	d100      	bne.n	8003e5c <memcpy+0xc>
 8003e5a:	4770      	bx	lr
 8003e5c:	b510      	push	{r4, lr}
 8003e5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e66:	4291      	cmp	r1, r2
 8003e68:	d1f9      	bne.n	8003e5e <memcpy+0xe>
 8003e6a:	bd10      	pop	{r4, pc}

08003e6c <memmove>:
 8003e6c:	4288      	cmp	r0, r1
 8003e6e:	b510      	push	{r4, lr}
 8003e70:	eb01 0402 	add.w	r4, r1, r2
 8003e74:	d902      	bls.n	8003e7c <memmove+0x10>
 8003e76:	4284      	cmp	r4, r0
 8003e78:	4623      	mov	r3, r4
 8003e7a:	d807      	bhi.n	8003e8c <memmove+0x20>
 8003e7c:	1e43      	subs	r3, r0, #1
 8003e7e:	42a1      	cmp	r1, r4
 8003e80:	d008      	beq.n	8003e94 <memmove+0x28>
 8003e82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e8a:	e7f8      	b.n	8003e7e <memmove+0x12>
 8003e8c:	4402      	add	r2, r0
 8003e8e:	4601      	mov	r1, r0
 8003e90:	428a      	cmp	r2, r1
 8003e92:	d100      	bne.n	8003e96 <memmove+0x2a>
 8003e94:	bd10      	pop	{r4, pc}
 8003e96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e9e:	e7f7      	b.n	8003e90 <memmove+0x24>

08003ea0 <_free_r>:
 8003ea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ea2:	2900      	cmp	r1, #0
 8003ea4:	d044      	beq.n	8003f30 <_free_r+0x90>
 8003ea6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003eaa:	9001      	str	r0, [sp, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f1a1 0404 	sub.w	r4, r1, #4
 8003eb2:	bfb8      	it	lt
 8003eb4:	18e4      	addlt	r4, r4, r3
 8003eb6:	f000 f913 	bl	80040e0 <__malloc_lock>
 8003eba:	4a1e      	ldr	r2, [pc, #120]	; (8003f34 <_free_r+0x94>)
 8003ebc:	9801      	ldr	r0, [sp, #4]
 8003ebe:	6813      	ldr	r3, [r2, #0]
 8003ec0:	b933      	cbnz	r3, 8003ed0 <_free_r+0x30>
 8003ec2:	6063      	str	r3, [r4, #4]
 8003ec4:	6014      	str	r4, [r2, #0]
 8003ec6:	b003      	add	sp, #12
 8003ec8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ecc:	f000 b90e 	b.w	80040ec <__malloc_unlock>
 8003ed0:	42a3      	cmp	r3, r4
 8003ed2:	d908      	bls.n	8003ee6 <_free_r+0x46>
 8003ed4:	6825      	ldr	r5, [r4, #0]
 8003ed6:	1961      	adds	r1, r4, r5
 8003ed8:	428b      	cmp	r3, r1
 8003eda:	bf01      	itttt	eq
 8003edc:	6819      	ldreq	r1, [r3, #0]
 8003ede:	685b      	ldreq	r3, [r3, #4]
 8003ee0:	1949      	addeq	r1, r1, r5
 8003ee2:	6021      	streq	r1, [r4, #0]
 8003ee4:	e7ed      	b.n	8003ec2 <_free_r+0x22>
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	b10b      	cbz	r3, 8003ef0 <_free_r+0x50>
 8003eec:	42a3      	cmp	r3, r4
 8003eee:	d9fa      	bls.n	8003ee6 <_free_r+0x46>
 8003ef0:	6811      	ldr	r1, [r2, #0]
 8003ef2:	1855      	adds	r5, r2, r1
 8003ef4:	42a5      	cmp	r5, r4
 8003ef6:	d10b      	bne.n	8003f10 <_free_r+0x70>
 8003ef8:	6824      	ldr	r4, [r4, #0]
 8003efa:	4421      	add	r1, r4
 8003efc:	1854      	adds	r4, r2, r1
 8003efe:	42a3      	cmp	r3, r4
 8003f00:	6011      	str	r1, [r2, #0]
 8003f02:	d1e0      	bne.n	8003ec6 <_free_r+0x26>
 8003f04:	681c      	ldr	r4, [r3, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	6053      	str	r3, [r2, #4]
 8003f0a:	4421      	add	r1, r4
 8003f0c:	6011      	str	r1, [r2, #0]
 8003f0e:	e7da      	b.n	8003ec6 <_free_r+0x26>
 8003f10:	d902      	bls.n	8003f18 <_free_r+0x78>
 8003f12:	230c      	movs	r3, #12
 8003f14:	6003      	str	r3, [r0, #0]
 8003f16:	e7d6      	b.n	8003ec6 <_free_r+0x26>
 8003f18:	6825      	ldr	r5, [r4, #0]
 8003f1a:	1961      	adds	r1, r4, r5
 8003f1c:	428b      	cmp	r3, r1
 8003f1e:	bf04      	itt	eq
 8003f20:	6819      	ldreq	r1, [r3, #0]
 8003f22:	685b      	ldreq	r3, [r3, #4]
 8003f24:	6063      	str	r3, [r4, #4]
 8003f26:	bf04      	itt	eq
 8003f28:	1949      	addeq	r1, r1, r5
 8003f2a:	6021      	streq	r1, [r4, #0]
 8003f2c:	6054      	str	r4, [r2, #4]
 8003f2e:	e7ca      	b.n	8003ec6 <_free_r+0x26>
 8003f30:	b003      	add	sp, #12
 8003f32:	bd30      	pop	{r4, r5, pc}
 8003f34:	200001a4 	.word	0x200001a4

08003f38 <sbrk_aligned>:
 8003f38:	b570      	push	{r4, r5, r6, lr}
 8003f3a:	4e0e      	ldr	r6, [pc, #56]	; (8003f74 <sbrk_aligned+0x3c>)
 8003f3c:	460c      	mov	r4, r1
 8003f3e:	6831      	ldr	r1, [r6, #0]
 8003f40:	4605      	mov	r5, r0
 8003f42:	b911      	cbnz	r1, 8003f4a <sbrk_aligned+0x12>
 8003f44:	f000 f8bc 	bl	80040c0 <_sbrk_r>
 8003f48:	6030      	str	r0, [r6, #0]
 8003f4a:	4621      	mov	r1, r4
 8003f4c:	4628      	mov	r0, r5
 8003f4e:	f000 f8b7 	bl	80040c0 <_sbrk_r>
 8003f52:	1c43      	adds	r3, r0, #1
 8003f54:	d00a      	beq.n	8003f6c <sbrk_aligned+0x34>
 8003f56:	1cc4      	adds	r4, r0, #3
 8003f58:	f024 0403 	bic.w	r4, r4, #3
 8003f5c:	42a0      	cmp	r0, r4
 8003f5e:	d007      	beq.n	8003f70 <sbrk_aligned+0x38>
 8003f60:	1a21      	subs	r1, r4, r0
 8003f62:	4628      	mov	r0, r5
 8003f64:	f000 f8ac 	bl	80040c0 <_sbrk_r>
 8003f68:	3001      	adds	r0, #1
 8003f6a:	d101      	bne.n	8003f70 <sbrk_aligned+0x38>
 8003f6c:	f04f 34ff 	mov.w	r4, #4294967295
 8003f70:	4620      	mov	r0, r4
 8003f72:	bd70      	pop	{r4, r5, r6, pc}
 8003f74:	200001a8 	.word	0x200001a8

08003f78 <_malloc_r>:
 8003f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f7c:	1ccd      	adds	r5, r1, #3
 8003f7e:	f025 0503 	bic.w	r5, r5, #3
 8003f82:	3508      	adds	r5, #8
 8003f84:	2d0c      	cmp	r5, #12
 8003f86:	bf38      	it	cc
 8003f88:	250c      	movcc	r5, #12
 8003f8a:	2d00      	cmp	r5, #0
 8003f8c:	4607      	mov	r7, r0
 8003f8e:	db01      	blt.n	8003f94 <_malloc_r+0x1c>
 8003f90:	42a9      	cmp	r1, r5
 8003f92:	d905      	bls.n	8003fa0 <_malloc_r+0x28>
 8003f94:	230c      	movs	r3, #12
 8003f96:	603b      	str	r3, [r7, #0]
 8003f98:	2600      	movs	r6, #0
 8003f9a:	4630      	mov	r0, r6
 8003f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fa0:	4e2e      	ldr	r6, [pc, #184]	; (800405c <_malloc_r+0xe4>)
 8003fa2:	f000 f89d 	bl	80040e0 <__malloc_lock>
 8003fa6:	6833      	ldr	r3, [r6, #0]
 8003fa8:	461c      	mov	r4, r3
 8003faa:	bb34      	cbnz	r4, 8003ffa <_malloc_r+0x82>
 8003fac:	4629      	mov	r1, r5
 8003fae:	4638      	mov	r0, r7
 8003fb0:	f7ff ffc2 	bl	8003f38 <sbrk_aligned>
 8003fb4:	1c43      	adds	r3, r0, #1
 8003fb6:	4604      	mov	r4, r0
 8003fb8:	d14d      	bne.n	8004056 <_malloc_r+0xde>
 8003fba:	6834      	ldr	r4, [r6, #0]
 8003fbc:	4626      	mov	r6, r4
 8003fbe:	2e00      	cmp	r6, #0
 8003fc0:	d140      	bne.n	8004044 <_malloc_r+0xcc>
 8003fc2:	6823      	ldr	r3, [r4, #0]
 8003fc4:	4631      	mov	r1, r6
 8003fc6:	4638      	mov	r0, r7
 8003fc8:	eb04 0803 	add.w	r8, r4, r3
 8003fcc:	f000 f878 	bl	80040c0 <_sbrk_r>
 8003fd0:	4580      	cmp	r8, r0
 8003fd2:	d13a      	bne.n	800404a <_malloc_r+0xd2>
 8003fd4:	6821      	ldr	r1, [r4, #0]
 8003fd6:	3503      	adds	r5, #3
 8003fd8:	1a6d      	subs	r5, r5, r1
 8003fda:	f025 0503 	bic.w	r5, r5, #3
 8003fde:	3508      	adds	r5, #8
 8003fe0:	2d0c      	cmp	r5, #12
 8003fe2:	bf38      	it	cc
 8003fe4:	250c      	movcc	r5, #12
 8003fe6:	4629      	mov	r1, r5
 8003fe8:	4638      	mov	r0, r7
 8003fea:	f7ff ffa5 	bl	8003f38 <sbrk_aligned>
 8003fee:	3001      	adds	r0, #1
 8003ff0:	d02b      	beq.n	800404a <_malloc_r+0xd2>
 8003ff2:	6823      	ldr	r3, [r4, #0]
 8003ff4:	442b      	add	r3, r5
 8003ff6:	6023      	str	r3, [r4, #0]
 8003ff8:	e00e      	b.n	8004018 <_malloc_r+0xa0>
 8003ffa:	6822      	ldr	r2, [r4, #0]
 8003ffc:	1b52      	subs	r2, r2, r5
 8003ffe:	d41e      	bmi.n	800403e <_malloc_r+0xc6>
 8004000:	2a0b      	cmp	r2, #11
 8004002:	d916      	bls.n	8004032 <_malloc_r+0xba>
 8004004:	1961      	adds	r1, r4, r5
 8004006:	42a3      	cmp	r3, r4
 8004008:	6025      	str	r5, [r4, #0]
 800400a:	bf18      	it	ne
 800400c:	6059      	strne	r1, [r3, #4]
 800400e:	6863      	ldr	r3, [r4, #4]
 8004010:	bf08      	it	eq
 8004012:	6031      	streq	r1, [r6, #0]
 8004014:	5162      	str	r2, [r4, r5]
 8004016:	604b      	str	r3, [r1, #4]
 8004018:	4638      	mov	r0, r7
 800401a:	f104 060b 	add.w	r6, r4, #11
 800401e:	f000 f865 	bl	80040ec <__malloc_unlock>
 8004022:	f026 0607 	bic.w	r6, r6, #7
 8004026:	1d23      	adds	r3, r4, #4
 8004028:	1af2      	subs	r2, r6, r3
 800402a:	d0b6      	beq.n	8003f9a <_malloc_r+0x22>
 800402c:	1b9b      	subs	r3, r3, r6
 800402e:	50a3      	str	r3, [r4, r2]
 8004030:	e7b3      	b.n	8003f9a <_malloc_r+0x22>
 8004032:	6862      	ldr	r2, [r4, #4]
 8004034:	42a3      	cmp	r3, r4
 8004036:	bf0c      	ite	eq
 8004038:	6032      	streq	r2, [r6, #0]
 800403a:	605a      	strne	r2, [r3, #4]
 800403c:	e7ec      	b.n	8004018 <_malloc_r+0xa0>
 800403e:	4623      	mov	r3, r4
 8004040:	6864      	ldr	r4, [r4, #4]
 8004042:	e7b2      	b.n	8003faa <_malloc_r+0x32>
 8004044:	4634      	mov	r4, r6
 8004046:	6876      	ldr	r6, [r6, #4]
 8004048:	e7b9      	b.n	8003fbe <_malloc_r+0x46>
 800404a:	230c      	movs	r3, #12
 800404c:	603b      	str	r3, [r7, #0]
 800404e:	4638      	mov	r0, r7
 8004050:	f000 f84c 	bl	80040ec <__malloc_unlock>
 8004054:	e7a1      	b.n	8003f9a <_malloc_r+0x22>
 8004056:	6025      	str	r5, [r4, #0]
 8004058:	e7de      	b.n	8004018 <_malloc_r+0xa0>
 800405a:	bf00      	nop
 800405c:	200001a4 	.word	0x200001a4

08004060 <_realloc_r>:
 8004060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004064:	4680      	mov	r8, r0
 8004066:	4614      	mov	r4, r2
 8004068:	460e      	mov	r6, r1
 800406a:	b921      	cbnz	r1, 8004076 <_realloc_r+0x16>
 800406c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004070:	4611      	mov	r1, r2
 8004072:	f7ff bf81 	b.w	8003f78 <_malloc_r>
 8004076:	b92a      	cbnz	r2, 8004084 <_realloc_r+0x24>
 8004078:	f7ff ff12 	bl	8003ea0 <_free_r>
 800407c:	4625      	mov	r5, r4
 800407e:	4628      	mov	r0, r5
 8004080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004084:	f000 f838 	bl	80040f8 <_malloc_usable_size_r>
 8004088:	4284      	cmp	r4, r0
 800408a:	4607      	mov	r7, r0
 800408c:	d802      	bhi.n	8004094 <_realloc_r+0x34>
 800408e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004092:	d812      	bhi.n	80040ba <_realloc_r+0x5a>
 8004094:	4621      	mov	r1, r4
 8004096:	4640      	mov	r0, r8
 8004098:	f7ff ff6e 	bl	8003f78 <_malloc_r>
 800409c:	4605      	mov	r5, r0
 800409e:	2800      	cmp	r0, #0
 80040a0:	d0ed      	beq.n	800407e <_realloc_r+0x1e>
 80040a2:	42bc      	cmp	r4, r7
 80040a4:	4622      	mov	r2, r4
 80040a6:	4631      	mov	r1, r6
 80040a8:	bf28      	it	cs
 80040aa:	463a      	movcs	r2, r7
 80040ac:	f7ff fed0 	bl	8003e50 <memcpy>
 80040b0:	4631      	mov	r1, r6
 80040b2:	4640      	mov	r0, r8
 80040b4:	f7ff fef4 	bl	8003ea0 <_free_r>
 80040b8:	e7e1      	b.n	800407e <_realloc_r+0x1e>
 80040ba:	4635      	mov	r5, r6
 80040bc:	e7df      	b.n	800407e <_realloc_r+0x1e>
	...

080040c0 <_sbrk_r>:
 80040c0:	b538      	push	{r3, r4, r5, lr}
 80040c2:	4d06      	ldr	r5, [pc, #24]	; (80040dc <_sbrk_r+0x1c>)
 80040c4:	2300      	movs	r3, #0
 80040c6:	4604      	mov	r4, r0
 80040c8:	4608      	mov	r0, r1
 80040ca:	602b      	str	r3, [r5, #0]
 80040cc:	f7fd f83e 	bl	800114c <_sbrk>
 80040d0:	1c43      	adds	r3, r0, #1
 80040d2:	d102      	bne.n	80040da <_sbrk_r+0x1a>
 80040d4:	682b      	ldr	r3, [r5, #0]
 80040d6:	b103      	cbz	r3, 80040da <_sbrk_r+0x1a>
 80040d8:	6023      	str	r3, [r4, #0]
 80040da:	bd38      	pop	{r3, r4, r5, pc}
 80040dc:	200001ac 	.word	0x200001ac

080040e0 <__malloc_lock>:
 80040e0:	4801      	ldr	r0, [pc, #4]	; (80040e8 <__malloc_lock+0x8>)
 80040e2:	f000 b811 	b.w	8004108 <__retarget_lock_acquire_recursive>
 80040e6:	bf00      	nop
 80040e8:	200001b0 	.word	0x200001b0

080040ec <__malloc_unlock>:
 80040ec:	4801      	ldr	r0, [pc, #4]	; (80040f4 <__malloc_unlock+0x8>)
 80040ee:	f000 b80c 	b.w	800410a <__retarget_lock_release_recursive>
 80040f2:	bf00      	nop
 80040f4:	200001b0 	.word	0x200001b0

080040f8 <_malloc_usable_size_r>:
 80040f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040fc:	1f18      	subs	r0, r3, #4
 80040fe:	2b00      	cmp	r3, #0
 8004100:	bfbc      	itt	lt
 8004102:	580b      	ldrlt	r3, [r1, r0]
 8004104:	18c0      	addlt	r0, r0, r3
 8004106:	4770      	bx	lr

08004108 <__retarget_lock_acquire_recursive>:
 8004108:	4770      	bx	lr

0800410a <__retarget_lock_release_recursive>:
 800410a:	4770      	bx	lr

0800410c <_init>:
 800410c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800410e:	bf00      	nop
 8004110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004112:	bc08      	pop	{r3}
 8004114:	469e      	mov	lr, r3
 8004116:	4770      	bx	lr

08004118 <_fini>:
 8004118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800411a:	bf00      	nop
 800411c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800411e:	bc08      	pop	{r3}
 8004120:	469e      	mov	lr, r3
 8004122:	4770      	bx	lr
